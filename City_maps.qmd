---
title: "City_maps"
title-block-banner: true
title-block-banner-color: cornflowerblue
author: "Pablo Leon"
date: "4/06/2023"
format:
  html:
    toc: true
    html-math-method: katex
    code-fold: true
    editor: visual
---


```{r markdown custom style, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
                      dpi = 180, fig.width = 8, fig.height = 5)
library(tidyverse) 
```

## Creating city maps using **osmdata** package 

This is a project to build maps with global open access mapping data using OSMDATA package in R.

<https://docs.ropensci.org/osmdata/articles/osmdata.html>.

In the package website, they explain that working with open access map data, ensures transparent data provenance and ownership, allowing anyone to contribute, encouraging democratic decision making and citizen science. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017)

## Working with vector data

OpenStreetMap (OSM) project information can be accessed via overpassqueries using **osmdata** package in R. This package obtain OSM data from the overpass API, which is a read-only API that serves up custom selected parts of the the OSM map data.

## Install and load OSMDATA package from CRAN

To start working with Open OpenStreetMap package, install it from CRAN

```{r install OpenStreetMap}
# install.packages("osmdata",dependencies = TRUE)
```

And then load it the usual way

```{r load osmdata}
#| echo: false
library(osmdata)
```

From osmdata package we will use these functions to plot our map:

-   getbb(): Get bounding box for a given place name
-   available_features(): List recognized features in OpenStreetMap(OSM)
-   available_features(): List recognized features in OSM. This function returns a character vector of all known features
-   available_tags(): List tags associated with a feature

Once we know which features and tags we want to include in our map, we can start building the query to the API to retrieve these features

-   opq(): Build an Overpass query
-   add_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot **"highway"** feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as **""motorway","primary","secondary","tertiary","residential","living_street","unclassified"** as we can see in the Valencia city map example.
-   osmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.

The combination of the above three functions provides us with an object that ggplot() package can take in to create a map using the geom_sf() function.

In a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.

For a further explantion about sf objects, please refer to Jesse Sadler website: \[sf objects\]<https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.>

Load also extra libraries for data wrangling and to create plots

```{r load required libraries}
pacman::p_load(here,tidyverse,osmdata,sf,showtext)
```

The `echo: false` option disables the printing of code (only output is displayed).

## Visualize Valencia city map using OpenStreetMap tutorial

When building maps using OpenStreetMap, we can think about them in similar terms as ggplot2 plots, in the sense we build them step by step, adding one layer at a time to display the required information on top of the initial map of the region we want to create a map from.

Having selected the city we want to plot, then we use getbb() function to obtain a bounding box for a given place name. In this instance I will plot the city of Valencia in Spain.

getbb() provides latitude and longitude coordinates associated with Valencia city in Spain

```{r Bounding box for Valencia city}
getbb("Valencia Spain")

```


## 1. Select your reagion and add one feature

Now that I want to plot a map of Valencia I need to choose which features do I want to plot. Each feature is defined by a key and each key is sub-divided into further values.

For example, if I want to start plotting *roads* or highways into my map, I need to first identify how roads are defined in osmdata package. For that we use available_features() function to choose different roads or transportation routes defined in the map

```{r display features}
# Not run as there are more than 250 elements
# available_features()
```

From the above list of features I can see "highway" as available key, so now I need to know which specific values are linked to that key. For tha I will use available_tags() function, to find out which values are related to the key "highway"

```{r get values tags for highway key}
available_tags("highway")
```

As I want to start by plotting the main roads in the city of Valencia, i will choose a handful of the above tags: motorway, primary, secondary, tertiary,residential,living_street, unclassified.

## 2. Choosing elements for map first layer

We name each layer with the key and values we want to plot in the map. So for this first example, I want to see several types of roads in the region of Valencia

```{r Map layer 01 roads}
# MAP LAYER 01: roads  
roads <- getbb("Valencia Spain") %>% 
         opq(timeout =  3500) %>% 
         add_osm_feature(key = "highway",
                        value = c("motorway","primary","secondary","tertiary",
                                  "residential","living_street","unclassified")) %>% 
         osmdata_sf()
roads
```

## 3. Building maps in layers by adding natural and urban features

### 3.1 Initial Valencia city map showing roads and highways

Using ggplot2, we use the sf cartographic object we queried from the OpenMap API, mapping several sf objects via ggplot2 and geom_sf() functions.

Also, It is in this step where we make use of getbb("Valencia Spain") function, to ensure the features we match the specific latitude and longitude of the city we want to plot.

We have created so far just one geom_sf() object, we include it within the ggplot() function alongside the lat and long coordinated of Valencia.

Prior to producing the final map, we define the color palette for each new feature

```{r map  roads color palette}
# Remember to enclose Hexadecimal colors in apostrophes 
road_color <- '#000000'
coastline_color <- '#000000'
```

Then we can combine all previous scripts to create our first map

- **MAP 01: Create a standard ggplot() object using geom_sf() and osm features defined as roads**

```{r Valencia road map, warning=FALSE}
Valencia_roads_map <- ggplot() +
                  geom_sf(data = roads$osm_lines,
                          inherit.aes = FALSE,
                          color = road_color
                            ) +
                  # Define city coordinates for maps. Given by getbb("Valencia Spain") function
                  coord_sf(xlim = c(-0.4325512, -0.2725205),
                           ylim = c(39.2784496, 39.5666089),
                           expand = FALSE)
Valencia_roads_map
```

### 3.2 Valencia city map including roads and coastline and also adding coastline features

Now we add a new layer to the previous map, including natural water features such as bays beaches, dunes and coastline.

```{r natural tag}
available_tags("natural")

```
Among all possible natural tags, we choose those related to coastline and seafront features such as beaches and bays

```{r Valencia coastline}
Vlc_coastline <- getbb("Valencia Spain") %>% 
  opq(timeout =  3500) %>% 
  add_osm_feature(key = "natural",
                  value = c("bay","water","beach","wetland","dune","coastline")) %>% 
  osmdata_sf()
Vlc_coastline
```

- In order to display the Valencian bay opposite the city seafront we have to define it as a multipolygon object

```{r Valencia coastline multipolygons}
Vlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons
```

- Roads features are defined as lines whilst coastline and water features are defined as polygons

- **MAP 02: This is a new map combining roads and coastline layers**

- Set colour palette for road and coastline features

```{r colour palette road and coastline features}
road_color <- '#1E212B'
coastline_color <- '#D4B483'
```
```{r Valencia coastline map}
# This is the ggplot2() MAP02
Valencia_coastline_map <- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = road_color
  ) +
  # coastline as multipolygons
  geom_sf(data = Vlc_coastline_multipolygons,
          inherit.aes = FALSE,
          color = coastline_color
  ) +
  # Define city coordinates for maps. Given by getbb("Valencia Spain") function
  coord_sf(xlim = c(-0.4325512, -0.2725205),
           ylim = c(39.2784496, 39.5666089),
           expand = FALSE)
Valencia_coastline_map
```

### 3.3 New Water bodies features added to Valencia city map

- We want to include the sea and different water bodies such as reservoirs and natural lagoons in the map. South of Valencia city there is fresh water lagoon called "La Albufera" we want to display it in hues of blue colors.

```{r Valencia sea and river}
Vlc_water <- getbb("Valencia Spain") %>% 
  opq(timeout =  3500) %>% 
  add_osm_feature(key = "water") %>% 
  osmdata_sf()

Vlc_sea <- getbb("Valencia Spain") %>% 
  opq(timeout =  3500) %>% 
  add_osm_feature(key = "waterway",
                  value = "river") %>% 
  osmdata_sf()
```

- To display these water features in the map, we define them as multipolygon objects

```{r Sea and water as multypolygons}
Vlc_water_multipolygons <- Vlc_water$osm_multipolygons
Vlc_sea_multipolygons <- Vlc_sea$osm_multipolygons
```

- **MAP 03: Map including these new water features (we build them on the previous road and highways features included on previous steps)**

```{r Valencia sea and river colour palette}
# Set colour palette for water features 
road_color <- '#1E212B'
coastline_color <- '#D4B483'
water_color <- '#0066CC'
waterway_color <- '#99CCFF'
```

```{r Valencia city streets and water features}

# This is the ggplot2() MAP03

Valencia_waterways_map <- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,
          inherit.aes = FALSE,
          color = road_color
  ) +
  # coastline as multipolygons
  geom_sf(data = Vlc_coastline_multipolygons,
          inherit.aes = FALSE,
          color = coastline_color
  ) +
  
  # water colour as multipolygons
  geom_sf(data = Vlc_water_multipolygons,
          inherit.aes = FALSE,
          color = water_color
  ) +
  # waterway colour as multipolygons
  geom_sf(data = Vlc_sea_multipolygons,
          inherit.aes = FALSE,
          color = waterway_color
  ) +
  # Define city coordinates for maps. Given by getbb("Valencia Spain") function
  coord_sf(xlim = c(-0.4325512, -0.2725205),
           ylim = c(39.2784496, 39.5666089),
           expand = FALSE)
Valencia_waterways_map   

```

In the next section of this tutorial,  we will include one last feature in the map, when we choose specific geological features by its common name from the OpenStreetMap API data base. 

### 3.4 Including specific feature by name in the map 

- This new layer in our map provides us with a method of locating specific geological features by its common name. In this example I will include the l'Albufera freshwater lagoon. 

- It is the largest freshwater lagoon in Spain, spanning more than 2,800 hectares.

- First, we We need to locate the name of l'Albufera in the data returned by the  API call 

```{r Albufera natural feature by exact name}
Albufera_lagoon  <- getbb("Valencia Spain") %>% 
                      opq() %>% 
                      add_osm_feature(key = "natural") %>% 
                      add_osm_feature(key = "name", value = "l'Albufera", value_exact = FALSE) %>% 
                      osmdata_sf()
View(Albufera_lagoon)
```

- Again we define this lagoon as a polygon object in the map 

```{r Albufera lagoon defined as multypolygons}
Albufera_multipolygons <- Albufera_lagoon$osm_multipolygons
View(Albufera_multipolygons)
```

- Now we have this new geological object defined by its common name "l'Albufera" available to be plotted in our map

- **MAP 04: Map including highway and road features, and also water features and l'Albufera lagoon as a new feature**

- Set colour palette for l'Albufera map 

```{r Albufera colour palette}
road_color <- '#1E212B'
waterway_color <- '#99CCFF'
water_color <- '#0066CC'
albufera_lagoon <- "#0ACDFF"
```

```{r Valencia Lagoon city map}

Valencia_lagoon_map <- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +
  # coastline
  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +
  # water colour as multipolygons
  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +
  # waterway colour as multipolygons
  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +
  # Adding l'Albufera lagoon to the map
  geom_sf(data = Albufera_multipolygons,inherit.aes = FALSE, fill = albufera_lagoon, color = albufera_lagoon) +
  # Define city coordinates for maps. Given by getbb("Valencia Spain") function
  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE)

Valencia_lagoon_map  

```

## 4. VALENCIA OPEN STREET MAP (including all previous features)

#### 4.1 Combining all features into a single map and applying specific Theme

Now that we have defined several features to be plotted in our map (roads,coastline,waterways and rivers), we can combine them all into an output map. Again we add each of these feature using the geom_sf() function. 

This final step also includes making the map prettier by applying several theme options and adding a background colour to the map as well as Title and Subtitle:
- Include Map title and subtitle 
- Setup background colour
- Set map margins

- Set colour palette for VALENCIA OPEN STREET MAP

```{r Valencia open street map colour palette}
road_color <- '#1E212B'
coastline_color <- '#D4B483'
water_color <- '#0066CC'
waterway_color <- '#99CCFF'
albufera_lagoon <- "#0ACDFF"
font_color <-'#D2691E' 
background_color <- "#D4B483"
```

In this map below, we combine all previous features into one final map

- **MAP 05: VALENCIA OPEN STREET MAP, ALL PREVIOUS FEATURES INCLUDED** 

```{r Valencia city map}

Valencia_city_map <- ggplot() +
  # roads
  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +
  # coastline
  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +
  # water colour as multipolygons
  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +
  # waterway colour as multipolygons
  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +
  # Adding l'Albufera lagoon to the map
  geom_sf(data = Albufera_multipolygons,inherit.aes = FALSE, fill = albufera_lagoon, color = albufera_lagoon) +
  # Define city coordinates for maps. Given by getbb("Valencia Spain") function
  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE) +
  # Include Map title and subtitle 
  labs(title = "Valencia ~ l'Albufera", subtitle = '39.4699° N, 0.3763° W') +
  # Apply specific theme to map title and sub-title
  theme_void() +
  theme(
    plot.title = element_text(family = "Barlow",color = font_color,size = 9, 
                              hjust = 0, vjust = 1),
    plot.title.position = "plot",
    plot.subtitle = element_text(family = "Barlow",
                                 color = font_color,
                                 size = 5,
                                 hjust = 0 , vjust = 2.3),  
    # Setup background color for entire map 
    panel.border = element_rect(colour = background_color, fill = NA, size = 1),
    panel.margin = unit(c(0.6,1.6,1,1.6),"cm"),
    plot.background = element_rect(fill = background_color)
  ) 

Valencia_city_map 
```

Finally we save output map as a .png file to print it out. The default image width and height values can be changed to match a standard frame to hang it on the wall as a city map poster. 

```{r Output png image parameters}
name <- "Valencia_open_street_map"
width = 20
height = 40
```

The last step is to use ggsave() function to create an output .png file that to be exported and printed.

```{r Save output chart}
ggsave(here::here(paste(name,".png", sep ="_")),
       device = "png", width = width, height = height, units = "cm", dpi = "retina", bg = "transparent")
```
