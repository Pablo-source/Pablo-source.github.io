[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pablo-source.github.io",
    "section": "",
    "text": "This is my personal website. I will publish Quarto documents about Data Analysis, statistics, predictive modelling and maps created in R and Python.\nThis is a Quarto website hosted on GitHub pages\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Pablo Leon-Rodenas",
    "section": "",
    "text": "This is my personal website containing Quarto documents about Data Analysis, statistics, predictive modelling and maps created in R and Python.\nI am a Data analyst/R developer working in the NHS. I like to explore data using R and Python, my main topics of interests are predictive analytics, coding and automation. Improving my RAP practices when coding, building robust pipelines with Targets and contributing to the wider NHS-R and NHSE-R communities of practice.\nThis website include two main sections, one called City_maps, where I explore how to build several city maps in R using OpenStreetMap (OSM) information with osmdata package. These maps are built by adding layers of geographical information onto them.\nThe second section is a collection of online resources for Python, R and Statistics. It aims to share some interesting websites I find online with other R and Python developers."
  },
  {
    "objectID": "City_maps.html",
    "href": "City_maps.html",
    "title": "City_maps",
    "section": "",
    "text": "In this section, I will describe how to build maps for several cities around the world, using global open access mapping data from “osmdata” pacakge in R.\nhttps://docs.ropensci.org/osmdata/articles/osmdata.html.\nFrom the package website, they explain how working with open access map data, ensures transparent data provenance and ownership, allowing anyone to contribute, encouraging democratic decision making and citizen science. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017)"
  },
  {
    "objectID": "City_maps.html#working-with-vector-data",
    "href": "City_maps.html#working-with-vector-data",
    "title": "City_maps",
    "section": "Working with vector data",
    "text": "Working with vector data\nOpenStreetMap (OSM) project information can be accessed via overpass queries using osmdata package in R. This package obtains OSM data from the overpass API, which is a read-only API that serves up custom selected parts of the the OSM map data."
  },
  {
    "objectID": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "href": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "title": "City_maps",
    "section": "Install and load OSMDATA package from CRAN",
    "text": "Install and load OSMDATA package from CRAN\nTo start working with Open OpenStreetMap package, install it from CRAN\n\n\nCode\n# install.packages(\"osmdata\",dependencies = TRUE)\n\n\nAnd then load it the usual way\n\n\n\nFrom osmdata package we will use these functions to plot our map:\n\ngetbb(): Get bounding box for a given place name\navailable_features(): List recognized features in OpenStreetMap(OSM)\navailable_features(): List recognized features in OSM. This function returns a character vector of all known features\navailable_tags(): List tags associated with a feature\n\nOnce we know which features and tags we want to include in our map, we can start building the query to the API to retrieve these features\n\nopq(): Build an Overpass query\nadd_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot “highway” feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as ““motorway”,“primary”,“secondary”,“tertiary”,“residential”,“living_street”,“unclassified” as we can see in the Valencia city map example.\nosmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.\n\nThe combination of the above three functions provides us with an object that ggplot() package can take in to create a map using the geom_sf() function.\nIn a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.\nFor a further explantion about sf objects, please refer to Jesse Sadler website: [sf objects]https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.\nLoad also extra libraries for data wrangling and to create plots\n\n\nCode\npacman::p_load(here,tidyverse,osmdata,sf,showtext)\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "href": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "title": "City_maps",
    "section": "Visualize Valencia city map using OpenStreetMap tutorial",
    "text": "Visualize Valencia city map using OpenStreetMap tutorial\nWhen building maps using OpenStreetMap, we can think about them in similar terms as ggplot2 plots, in the sense we build them step by step, adding one layer at a time to display the required information on top of the initial map of the region we want to create a map from.\nHaving selected the city we want to plot, then we use getbb() function to obtain a bounding box for a given place name. In this instance I will plot the city of Valencia in Spain.\ngetbb() provides latitude and longitude coordinates associated with Valencia city in Spain\n\n\nCode\ngetbb(\"Valencia Spain\")\n\n\n         min        max\nx -0.4325512 -0.2725205\ny 39.2784496 39.5666089"
  },
  {
    "objectID": "City_maps.html#select-your-reagion-and-add-one-feature",
    "href": "City_maps.html#select-your-reagion-and-add-one-feature",
    "title": "City_maps",
    "section": "1. Select your reagion and add one feature",
    "text": "1. Select your reagion and add one feature\nNow that I want to plot a map of Valencia I need to choose which features do I want to plot. Each feature is defined by a key and each key is sub-divided into further values.\nFor example, if I want to start plotting roads or highways into my map, I need to first identify how roads are defined in osmdata package. For that we use available_features() function to choose different roads or transportation routes defined in the map\n\n\nCode\n# Not run as there are more than 250 elements\n# available_features()\n\n\nFrom the above list of features I can see “highway” as available key, so now I need to know which specific values are linked to that key. For tha I will use available_tags() function, to find out which values are related to the key “highway”\n\n\nCode\navailable_tags(\"highway\")\n\n\n [1] \"bridleway\"              \"bus_guideway\"           \"bus_stop\"              \n [4] \"busway\"                 \"construction\"           \"corridor\"              \n [7] \"crossing\"               \"cycleway\"               \"elevator\"              \n[10] \"emergency_access_point\" \"emergency_bay\"          \"escape\"                \n[13] \"footway\"                \"give_way\"               \"living_street\"         \n[16] \"milestone\"              \"mini_roundabout\"        \"motorway\"              \n[19] \"motorway_junction\"      \"motorway_link\"          \"passing_place\"         \n[22] \"path\"                   \"pedestrian\"             \"platform\"              \n[25] \"primary\"                \"primary_link\"           \"proposed\"              \n[28] \"raceway\"                \"residential\"            \"rest_area\"             \n[31] \"road\"                   \"secondary\"              \"secondary_link\"        \n[34] \"service\"                \"services\"               \"speed_camera\"          \n[37] \"steps\"                  \"stop\"                   \"street_lamp\"           \n[40] \"tertiary\"               \"tertiary_link\"          \"toll_gantry\"           \n[43] \"track\"                  \"traffic_mirror\"         \"traffic_signals\"       \n[46] \"trailhead\"              \"trunk\"                  \"trunk_link\"            \n[49] \"turning_circle\"         \"turning_loop\"           \"unclassified\"          \n[52] \"via_ferrata\"           \n\n\nAs I want to start by plotting the main roads in the city of Valencia, i will choose a handful of the above tags: motorway, primary, secondary, tertiary,residential,living_street, unclassified."
  },
  {
    "objectID": "City_maps.html#choosing-elements-for-map-first-layer",
    "href": "City_maps.html#choosing-elements-for-map-first-layer",
    "title": "City_maps",
    "section": "2. Choosing elements for map first layer",
    "text": "2. Choosing elements for map first layer\nWe name each layer with the key and values we want to plot in the map. So for this first example, I want to see several types of roads in the region of Valencia\n\n\nCode\n# MAP LAYER 01: roads  \nroads <- getbb(\"Valencia Spain\") %>% \n         opq(timeout =  3500) %>% \n         add_osm_feature(key = \"highway\",\n                        value = c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\n                                  \"residential\",\"living_street\",\"unclassified\")) %>% \n         osmdata_sf()\nroads"
  },
  {
    "objectID": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "href": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "title": "City_maps",
    "section": "3. Building maps in layers by adding natural and urban features",
    "text": "3. Building maps in layers by adding natural and urban features\n\n3.1 Initial Valencia city map showing roads and highways\nUsing ggplot2, we use the sf cartographic object we queried from the OpenMap API, mapping several sf objects via ggplot2 and geom_sf() functions.\nAlso, It is in this step where we make use of getbb(“Valencia Spain”) function, to ensure the features we match the specific latitude and longitude of the city we want to plot.\nWe have created so far just one geom_sf() object, we include it within the ggplot() function alongside the lat and long coordinated of Valencia.\nPrior to producing the final map, we define the color palette for each new feature\n\n\nCode\n# Remember to enclose Hexadecimal colors in apostrophes \nroad_color <- '#000000'\ncoastline_color <- '#000000'\n\n\nThen we can combine all previous scripts to create our first map\n\nMAP 01: Create a standard ggplot() object using geom_sf() and osm features defined as roads\n\n\n\nCode\nValencia_roads_map <- ggplot() +\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_roads_map\n\n\n\n\n\n\n\n3.2 Valencia city map including roads and coastline and also adding coastline features\nNow we add a new layer to the previous map, including natural water features such as bays beaches, dunes and coastline.\n\n\nCode\navailable_tags(\"natural\")\n\n\n [1] \"arch\"          \"arete\"         \"bare_rock\"     \"bay\"          \n [5] \"beach\"         \"blowhole\"      \"cape\"          \"cave_entrance\"\n [9] \"cliff\"         \"coastline\"     \"crevasse\"      \"dune\"         \n[13] \"earth_bank\"    \"fell\"          \"fumarole\"      \"geyser\"       \n[17] \"glacier\"       \"grassland\"     \"heath\"         \"hill\"         \n[21] \"hot_spring\"    \"isthmus\"       \"moor\"          \"mud\"          \n[25] \"peak\"          \"peninsula\"     \"reef\"          \"ridge\"        \n[29] \"rock\"          \"saddle\"        \"sand\"          \"scree\"        \n[33] \"scrub\"         \"shingle\"       \"shoal\"         \"shrubbery\"    \n[37] \"sinkhole\"      \"spring\"        \"stone\"         \"strait\"       \n[41] \"tree\"          \"tree_row\"      \"tundra\"        \"valley\"       \n[45] \"volcano\"       \"water\"         \"wetland\"       \"wood\"         \n\n\nAmong all possible natural tags, we choose those related to coastline and seafront features such as beaches and bays\n\n\nCode\nVlc_coastline <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"natural\",\n                  value = c(\"bay\",\"water\",\"beach\",\"wetland\",\"dune\",\"coastline\")) %>% \n  osmdata_sf()\nVlc_coastline\n\n\n\nIn order to display the Valencian bay opposite the city seafront we have to define it as a multipolygon object\n\n\n\nCode\nVlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons\n\n\n\nRoads features are defined as lines whilst coastline and water features are defined as polygons\nMAP 02: This is a new map combining roads and coastline layers\nSet colour palette for road and coastline features\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\n\n\n\n\nCode\n# This is the ggplot2() MAP02\nValencia_coastline_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_coastline_map\n\n\n\n\n\n\n\n3.3 New Water bodies features added to Valencia city map\n\nWe want to include the sea and different water bodies such as reservoirs and natural lagoons in the map. South of Valencia city there is fresh water lagoon called “La Albufera” we want to display it in hues of blue colors.\n\n\n\nCode\nVlc_water <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"water\") %>% \n  osmdata_sf()\n\nVlc_sea <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"waterway\",\n                  value = \"river\") %>% \n  osmdata_sf()\n\n\n\nTo display these water features in the map, we define them as multipolygon objects\n\n\n\nCode\nVlc_water_multipolygons <- Vlc_water$osm_multipolygons\nVlc_sea_multipolygons <- Vlc_sea$osm_multipolygons\n\n\n\nMAP 03: Map including these new water features (we build them on the previous road and highways features included on previous steps)\n\n\n\nCode\n# Set colour palette for water features \nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\n\n\nCode\n# This is the ggplot2() MAP03\n\nValencia_waterways_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  \n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,\n          inherit.aes = FALSE,\n          color = water_color\n  ) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,\n          inherit.aes = FALSE,\n          color = waterway_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_waterways_map"
  },
  {
    "objectID": "City_maps.html#valencia-open-street-map-including-all-previous-features",
    "href": "City_maps.html#valencia-open-street-map-including-all-previous-features",
    "title": "City_maps",
    "section": "4. VALENCIA OPEN STREET MAP (including all previous features)",
    "text": "4. VALENCIA OPEN STREET MAP (including all previous features)\n\n4.1 Combining all features into a single map and applying specific Theme\nNow that we have defined several features to be plotted in our map (roads,coastline,waterways and rivers), we can combine them all into an output map. Again we add each of these feature using the geom_sf() function.\nThis final step also includes making the map prettier by applying several theme options and adding a background colour to the map as well as Title and Subtitle: - Include Map title and subtitle - Setup background colour - Set map margins\n\nSet colour palette for VALENCIA OPEN STREET MAP\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\nalbufera_lagoon <- \"#0ACDFF\"\nfont_color <-'#D2691E' \nbackground_color <- \"#D4B483\"\n\n\nIn this map below, we combine all previous features into one final map\n\nMAP 04: VALENCIA OPEN STREET MAP, ALL PREVIOUS FEATURES INCLUDED\n\n\n\nCode\nValencia_city_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +\n  # coastline\n  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE) +\n  # Include Map title and subtitle \n  labs(title = \"Valencia ~ l'Albufera\", subtitle = '39.4699° N, 0.3763° W') +\n  # Apply specific theme to map title and sub-title\n  theme_void() +\n  theme(\n    plot.title = element_text(family = \"Barlow\",color = font_color,size = 9, \n                              hjust = 0, vjust = 1),\n    plot.title.position = \"plot\",\n    plot.subtitle = element_text(family = \"Barlow\",\n                                 color = font_color,\n                                 size = 5,\n                                 hjust = 0 , vjust = 2.3),  \n    # Setup background color for entire map \n    panel.border = element_rect(colour = background_color, fill = NA, size = 1),\n    panel.margin = unit(c(0.6,1.6,1,1.6),\"cm\"),\n    plot.background = element_rect(fill = background_color)\n  ) \n\nValencia_city_map \n\n\n\n\n\nFinally we save output map as a .png file to print it out. The default image width and height values can be changed to match a standard frame to hang it on the wall as a city map poster.\n\n\nCode\nname <- \"Valencia_open_street_map\"\nwidth = 20\nheight = 40\n\n\nThe last step is to use ggsave() function to create an output .png file that to be exported and printed.\n\n\nCode\nggsave(here::here(paste(name,\".png\", sep =\"_\")),\n       device = \"png\", width = width, height = height, units = \"cm\", dpi = \"retina\", bg = \"transparent\")\n\n\nIn coming weeks new city maps will be added to this section for the city of The Hague, Netherlands and Birmingham, UK."
  },
  {
    "objectID": "City_maps.html#annex",
    "href": "City_maps.html#annex",
    "title": "City_maps",
    "section": "5. Annex",
    "text": "5. Annex\n\nValencia city map output image as .png file https://github.com/Pablo-source/Maps-in-R/blob/main/City_maps/Valencia_open_street_map_.png\nValencia city map R script https://github.com/Pablo-source/Maps-in-R/blob/main/City_maps/Valencia_open_street_map.R\nSimilar quarto document to the one used to build this website https://github.com/Pablo-source/Maps-in-R/blob/main/Documentation/Quarto_markdown%20custom%20setup.qmd"
  },
  {
    "objectID": "City_maps.html#installing-and-loading-osmdata-package-from-cran",
    "href": "City_maps.html#installing-and-loading-osmdata-package-from-cran",
    "title": "City_maps",
    "section": "Installing and loading OSMDATA package from CRAN",
    "text": "Installing and loading OSMDATA package from CRAN\nTo start working with Open OpenStreetMap package, I first install it from CRAN\n\n\nCode\n# install.packages(\"osmdata\",dependencies = TRUE)\n\n\nAnd then load it the usual way using pacman::p_load() function to load several libraries at once, pacman::p_load(here,tidyverse,osmdata,sf,showtext). This is a more efficient way of working with several R libraries.\n\n\n\nThese are the specific From osmdata package we will use these functions to plot our map:\n\ngetbb(): Get bounding box for a given place name\navailable_features(): List recognized features in OpenStreetMap(OSM)\navailable_features(): List recognized features in OSM. This function returns a character vector of all known features\navailable_tags(): List tags associated with a feature\n\nOnce I know which features to include in the map (buildings,roads,rivers,lagoons and bays), then I select the relevant tags that constitute the query we pass to the API to plot them using ggplot2. These are the set of osmdata functions used in this section:\n\nopq(): Build an Overpass query\nadd_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot “highway” feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as ““motorway”,“primary”,“secondary”,“tertiary”,“residential”,“living_street”,“unclassified” as we can see in the Valencia city map example.\nosmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.\n\nThese three functions combined provides me with a gggplot2() object I can turn into a map using geom_sf() to handle shape files and polygons.\nIn a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.\nFor a further explanation about sf objects, please refer to Jesse Sadler website: [sf objects]https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.\nThen I load some extra libraries for data wrangling and to create plots\n\n\nCode\npacman::p_load(here,tidyverse,osmdata,sf,showtext)\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "City_maps.html#add-first-feature-to-the-openstreet-map",
    "href": "City_maps.html#add-first-feature-to-the-openstreet-map",
    "title": "City_maps",
    "section": "1. Add first feature to the OpenStreet map",
    "text": "1. Add first feature to the OpenStreet map\nWhen creating a map of Valencia, it’s important to decide which features to include. In OpenStreetMap, each feature is identified by a key, which is then further subdivided into values.\nTo plot roads or highways on the map, we first need to identify how these features are defined in the osmdata package. We can do this by using the available_features() function to select different types of roads or transportation routes defined in the map.\nOnce we have chosen the desired features, we can add them to our map along with other layers to create a comprehensive and informative representation of Valencia.\n\n\nCode\n# Not run as there are more than 250 elements\n# available_features()\n\n\nLooking at the list of available features, I can see that “highway” is one of the keys that I can use to plot transportation routes on my map of Valencia. However, I need to determine which specific values are associated with this key.\nTo do this, I can use the available_tags() function to identify the values that are related to the “highway” key. By selecting the appropriate values for the key, I can customize the map to display the types of transportation routes that are most relevant to my needs.”\n\n\nCode\navailable_tags(\"highway\")\n\n\n [1] \"bridleway\"              \"bus_guideway\"           \"bus_stop\"              \n [4] \"busway\"                 \"construction\"           \"corridor\"              \n [7] \"crossing\"               \"cycleway\"               \"elevator\"              \n[10] \"emergency_access_point\" \"emergency_bay\"          \"escape\"                \n[13] \"footway\"                \"give_way\"               \"living_street\"         \n[16] \"milestone\"              \"mini_roundabout\"        \"motorway\"              \n[19] \"motorway_junction\"      \"motorway_link\"          \"passing_place\"         \n[22] \"path\"                   \"pedestrian\"             \"platform\"              \n[25] \"primary\"                \"primary_link\"           \"proposed\"              \n[28] \"raceway\"                \"residential\"            \"rest_area\"             \n[31] \"road\"                   \"secondary\"              \"secondary_link\"        \n[34] \"service\"                \"services\"               \"speed_camera\"          \n[37] \"steps\"                  \"stop\"                   \"street_lamp\"           \n[40] \"tertiary\"               \"tertiary_link\"          \"toll_gantry\"           \n[43] \"track\"                  \"traffic_mirror\"         \"traffic_signals\"       \n[46] \"trailhead\"              \"trunk\"                  \"trunk_link\"            \n[49] \"turning_circle\"         \"turning_loop\"           \"unclassified\"          \n[52] \"via_ferrata\"           \n\n\nI plan to begin by mapping the primary roads in Valencia. To do this, I will select a few key tags from the list, such as motorway, primary, secondary, tertiary,residential,living_street, unclassified."
  },
  {
    "objectID": "City_maps.html#choose-elements-to-be-included-on-the-first-layer-of-the-map",
    "href": "City_maps.html#choose-elements-to-be-included-on-the-first-layer-of-the-map",
    "title": "City_maps",
    "section": "2. Choose elements to be included on the first layer of the map",
    "text": "2. Choose elements to be included on the first layer of the map\nRoads and highways are the first set of elements to be included on my map of Valencia. Displaying transportation routes in the city but also through its metropolitan area. From the previous available_tags() function, I choose “highway” as the appropriate value for this key.\nThis allows me to display different types of transportation types such as motorways, primary, secondary, and tertiary roads as well as motorways on the map.\n\n\nCode\n# MAP LAYER 01: roads  \nroads <- getbb(\"Valencia Spain\") %>% \n         opq(timeout =  3500) %>% \n         add_osm_feature(key = \"highway\",\n                        value = c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\n                                  \"residential\",\"living_street\",\"unclassified\")) %>% \n         osmdata_sf()\nroads"
  },
  {
    "objectID": "City_maps.html#adding-natural-and-urban-features-to-the-map",
    "href": "City_maps.html#adding-natural-and-urban-features-to-the-map",
    "title": "City_maps",
    "section": "3. Adding natural and urban features to the map",
    "text": "3. Adding natural and urban features to the map\n\n3.1 Initial Valencia city map showing roads and highways\nIn r, I use the sf cartographic object I obtained from our OpenMap API query, mapping several sf objects via ggplot2 and geom_sf() functions.\nAlso, using getbb(“Valencia Spain”) function, I ensure the features we display on the map macth the city latitude and longitude I want to plot.\nSo far I have created just one geom_sf() object, embedded insite the ggplot() function, alongside the lat and long values for the city of Valencia.\nPrior to producing the final map, I define the colour palette for each new feature,\n\n\nCode\n# Remember to enclose Hexadecimal colors in apostrophes \nroad_color <- '#000000'\ncoastline_color <- '#000000'\n\n\nThen I can combine all previous scripts to create the first output map:\n\nMAP 01: Create a standard ggplot() object using geom_sf() and osm features defined as roads\n\n\n\nCode\nValencia_roads_map <- ggplot() +\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_roads_map\n\n\n\n\n\n\n\n3.2 Valencia city displaying roads and streets plus coastline features\nNow I have added a new layer to the previous map, including beaches, dunes, bays and coastline natural water features.\n\n\nCode\navailable_tags(\"natural\")\n\n\n [1] \"arch\"          \"arete\"         \"bare_rock\"     \"bay\"          \n [5] \"beach\"         \"blowhole\"      \"cape\"          \"cave_entrance\"\n [9] \"cliff\"         \"coastline\"     \"crevasse\"      \"dune\"         \n[13] \"earth_bank\"    \"fell\"          \"fumarole\"      \"geyser\"       \n[17] \"glacier\"       \"grassland\"     \"heath\"         \"hill\"         \n[21] \"hot_spring\"    \"isthmus\"       \"moor\"          \"mud\"          \n[25] \"peak\"          \"peninsula\"     \"reef\"          \"ridge\"        \n[29] \"rock\"          \"saddle\"        \"sand\"          \"scree\"        \n[33] \"scrub\"         \"shingle\"       \"shoal\"         \"shrubbery\"    \n[37] \"sinkhole\"      \"spring\"        \"stone\"         \"strait\"       \n[41] \"tree\"          \"tree_row\"      \"tundra\"        \"valley\"       \n[45] \"volcano\"       \"water\"         \"wetland\"       \"wood\"         \n\n\nThese are the set of elements I will include in the map enclosed in the concatenate c() function below: “bay”,“water”,“beach”,“wetland”,“dune”, “coastline” all these are coastline and water related map features.\n\n\nCode\nVlc_coastline <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"natural\",\n                  value = c(\"bay\",\"water\",\"beach\",\"wetland\",\"dune\",\"coastline\")) %>% \n  osmdata_sf()\nVlc_coastline\n\n\n\nTo display the Valencian Bay in blue colour next to the city seafront I define it as a multipolygon object\n\n\n\nCode\nVlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons\n\n\n\nRoads features are defined as lines whilst coastline and water features are defined as multipolygons\nMAP 02: Map combining roads and coastline layers\nSet colour palette for road and coastline features\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\n\n\n\n\nCode\n# This is the ggplot2() MAP02\nValencia_coastline_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_coastline_map\n\n\n\n\n\n\n\n3.3 New Water bodies features added to Valencia city map\n\nI want to include reservoirs and natural lagoons in the map. South of Valencia city there is freshwater lagoon called “La Albufera” I will include them in the map using shades of blue colour.\n\n\n\nCode\nVlc_water <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"water\") %>% \n  osmdata_sf()\n\nVlc_sea <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"waterway\",\n                  value = \"river\") %>% \n  osmdata_sf()\n\n\n\nTo display these water features in the map, I define them as multipolygon objects\n\n\n\nCode\nVlc_water_multipolygons <- Vlc_water$osm_multipolygons\nVlc_sea_multipolygons <- Vlc_sea$osm_multipolygons\n\n\n\nMAP 03: Map including these new water bodies on top of previous road and highways features\n\n\n\nCode\n# Set colour palette for water features \nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\n\n\nCode\n# This is the ggplot2() MAP03\n\nValencia_waterways_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  \n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,\n          inherit.aes = FALSE,\n          color = water_color\n  ) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,\n          inherit.aes = FALSE,\n          color = waterway_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_waterways_map"
  },
  {
    "objectID": "City_maps.html#valencia-open-street-map",
    "href": "City_maps.html#valencia-open-street-map",
    "title": "City_maps",
    "section": "4. VALENCIA OPEN STREET MAP",
    "text": "4. VALENCIA OPEN STREET MAP\n\n4.1 Combining all features into a final output map\nAfter defining several features to be plotted in the map (roads,coastline,waterways and rivers), I combine them as ggplot2 plot layers. To finally create one single ggplot2 image output as a .png file.\nThis final step also includes enhancing the map appearance by applying several theme options, adding background colour and Title and Subtitle to the output map.\n\nSet colour palette for VALENCIA OPEN STREET MAP\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\nalbufera_lagoon <- \"#0ACDFF\"\nfont_color <-'#D2691E' \nbackground_color <- \"#D4B483\"\n\n\nThemed and formatted final output map of Valencia city\n\nMAP 04: Valencia city map\n\n\n\nCode\nValencia_city_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +\n  # coastline\n  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE) +\n  # Include Map title and subtitle \n  labs(title = \"Valencia ~ l'Albufera\", subtitle = '39.4699° N, 0.3763° W') +\n  # Apply specific theme to map title and sub-title\n  theme_void() +\n  theme(\n    plot.title = element_text(family = \"Barlow\",color = font_color,size = 9, \n                              hjust = 0, vjust = 1),\n    plot.title.position = \"plot\",\n    plot.subtitle = element_text(family = \"Barlow\",\n                                 color = font_color,\n                                 size = 5,\n                                 hjust = 0 , vjust = 2.3),  \n    # Setup background color for entire map \n    panel.border = element_rect(colour = background_color, fill = NA, size = 1),\n    panel.margin = unit(c(0.6,1.6,1,1.6),\"cm\"),\n    plot.background = element_rect(fill = background_color)\n  ) \n\nValencia_city_map \n\n\n\n\n\nThe default image width and height values can be changed to match a standard frame to hang it on the wall as a city map poster.\n\n\nCode\nname <- \"Valencia_open_street_map\"\nwidth = 20\nheight = 40\n\n\nThe last step is to use ggsave() function to create an output .png file that to be exported and printed.\n\n\nCode\nggsave(here::here(paste(name,\".png\", sep =\"_\")),\n       device = \"png\", width = width, height = height, units = \"cm\", dpi = \"retina\", bg = \"transparent\")\n\n\nIn coming weeks new city maps of The Hague, Netherlands and Birmingham, UK will be added to this section."
  },
  {
    "objectID": "Resources.html",
    "href": "Resources.html",
    "title": "Resources",
    "section": "",
    "text": "R and R Eco-system resources\nR tips\nPython tips\nNHS R and Python communities of practice\nR and Python online books"
  },
  {
    "objectID": "Resources.html#posit",
    "href": "Resources.html#posit",
    "title": "Resources",
    "section": "POSIT",
    "text": "POSIT\nPosit is the Company who developed RStudio IDE among other products, previously called RStudio. All your data products have a home on Posit Connect, Deploy R & Python content easily and securely, automate code execution and deliver insights to stakeholders that need them\n\nPosit website: https://posit.co/\n\n\nPOSIT learning resources\nLearning materials from POSIT about R, Python and Quarto\n\nBlogs: https://posit.co/blog/\nCheat sheets: https://posit.co/resources/cheatsheets/\nVideos: https://posit.co/resources/videos/"
  },
  {
    "objectID": "Resources.html#quarto",
    "href": "Resources.html#quarto",
    "title": "Resources",
    "section": "QUARTO",
    "text": "QUARTO\nAn Open-source scientific and technical publishing system, available for R, Python and Julia.\n\nQuarto website: https://quarto.org\n\nGet started with Quarto\n\nInstall Quarto: https://quarto.org/docs/get-started/\n\nAuthoring Quarto documents\nQuarto tutorial – Authoring: https://quarto.org/docs/get-started/authoring/rstudio.html\n\nInclude formatted title blocks at the start of the article: https://quarto.org/docs/authoring/title-blocks.html\nQuarto themes: Lumen: https://bootswatch.com/lumen/ Journal: https://bootswatch.com/journal/ Cosmo: https://bootswatch.com/cosmo/ Sandstone: https://bootswatch.com/sandstone/ Spacelab: https://bootswatch.com/spacelab/ Slate:https://bootswatch.com/slate/\nUpdate Quarto documents header date date automatically: https://bookdown.org/yihui/rmarkdown-cookbook/update-date.html\n\n\nCreating websites using Quarto\n\nA couple of resources on how to build a Quarto website:\nCreating it: Creating a Quarto website - YouTube: https://www.youtube.com/watch?v=_bglTCjgcqY\nPublishing it to GitHub: Publishing a Quarto website through GitHub pages - YouTube: https://www.youtube.com/watch?v=uimdXPZc40I\nChanging a Quarto website’s output directory: https://www.youtube.com/watch?v=ZkcY9YQ3iLY"
  },
  {
    "objectID": "Resources.html#rstudio",
    "href": "Resources.html#rstudio",
    "title": "Resources",
    "section": "RStudio",
    "text": "RStudio\nRStudio IDE to run R, developed by RStudio now POSIT\n\nRStudio IDE: https://posit.co/products/open-source/rstudio/"
  },
  {
    "objectID": "Resources.html#python",
    "href": "Resources.html#python",
    "title": "Resources",
    "section": "Python",
    "text": "Python\nPython main website\n\nPython: https://www.python.org/\n\nPython coding topics and data structures\n\nDictionaries: https://python.land/things-you-didnt-know-about-python-dictionaries"
  },
  {
    "objectID": "Resources.html#nhs-r-and-python-communities-of-practise",
    "href": "Resources.html#nhs-r-and-python-communities-of-practise",
    "title": "Resources",
    "section": "NHS R and Python communities of practise",
    "text": "NHS R and Python communities of practise"
  },
  {
    "objectID": "Resources.html#nhs-r-community",
    "href": "Resources.html#nhs-r-community",
    "title": "Resources",
    "section": "NHS-R Community",
    "text": "NHS-R Community\nTogether we aim to promote the use of R in the NHS: https://nhsrcommunity.com/ Wider NHS-R community pages and resources, includes links to a number of recorded sessions and training, all based on NHS datasets\n\nNHS-R Events\n\nConferences\n\n\nUpcoming conferences: https://nhsrcommunity.com/events/#event_type-conferences\nShow Past Events: https://nhsrcommunity.com/past-events/\nNHS-R Community Conference 2022: https://nhsrcommunity.com/events/nhs-r-community-conference-2022/\n\n\nGroup Discussions\n\n\nGroup Discussions: https://nhsrcommunity.com/events/#event_type-group-discussion\n\n\nGroup Discussions/workshops\n\n\nWebinars: https://nhsrcommunity.com/events/#event_type-group-discussionworkshops\n\n\nWebinars\n\n\nWebinars: https://nhsrcommunity.com/events/#event_type-webinars\n\n\nWorkshops\n\n\nWorkshops: https://nhsrcommunity.com/events/#event_type-workshops\n\n4.1 Upcoming workshops - NHS-R Workshop: Introduction to R and RStudio – 11th May 2023: https://nhsrcommunity.com/events/nhs-r-workshop-introduction-to-r-and-r-studio-11th-may-2023/\n\nNHS-R Workshop: Forecasting Using R – Advanced Methods – May 2023: https://nhsrcommunity.com/events/nhs-r-workshop-forecasting-using-r-advanced-methods-may-2023/"
  },
  {
    "objectID": "Resources.html#nhse-r",
    "href": "Resources.html#nhse-r",
    "title": "Resources",
    "section": "NHSE-R",
    "text": "NHSE-R\nWelcome to the NHS England R community documentation site The NHS England R Community is not intended to replace any other R user groups - there’s a fantastic national NHS-R Community and lots of local sharing of R work, we want to use this site to signpost to other resources for those specifically using R within NHS England.\n\nNHSE-R: https://nhsengland.github.io/nhs-r-reporting\nNHS England R Community Future NHS: https://future.nhs.uk/NHSERcommunity\nReproducible Analytical Pipelines (RAP): https://nhsengland.github.io/nhs-r-reporting/tutorials/rap.html"
  },
  {
    "objectID": "Resources.html#nhsd--rap-community-of-practice",
    "href": "Resources.html#nhsd--rap-community-of-practice",
    "title": "Resources",
    "section": "NHSD- RAP Community of Practice",
    "text": "NHSD- RAP Community of Practice\nRAP Community of practice: https://nhsdigital.github.io/rap-community-of-practice/\n\nBasic Python data analysis operations: https://nhsdigital.github.io/rap-community-of-practice/training_resources/python/basic-python-data-analysis-operations/"
  },
  {
    "objectID": "Resources.html#nhs-python",
    "href": "Resources.html#nhs-python",
    "title": "Resources",
    "section": "NHS-Python",
    "text": "NHS-Python\nPython community to promote the use of Python in the NHS.They organize forums, tutorials and coding sessions:\n\nThe Python Community for Healthcare: https://nhs-pycom.net/"
  },
  {
    "objectID": "Resources.html#code-editors",
    "href": "Resources.html#code-editors",
    "title": "Resources",
    "section": "Code editors",
    "text": "Code editors\n\nPycharm: https://www.jetbrains.com/pycharm/download/#section=windows\nRStudio: https://posit.co/download/rstudio-desktop/\nVStudio code: https://code.visualstudio.com/\nHow To Run Selected Lines In VS Code (Visual Studio Code) – YouTube: https://www.youtube.com/watch?v=VXJChVF28jw"
  },
  {
    "objectID": "Resources.html#r",
    "href": "Resources.html#r",
    "title": "Resources",
    "section": "R",
    "text": "R\nR is an open-source programming language that is widely used among statisticians and data scientists in the NHS. R has a large number of built-in functions and packages for statistical analysis and data visualisation. Along with tools such as Python1, R can be used to develop so-called reproducible analytical pipelines (RAP).\n\nThe R Project for Statistical Computing https://www.r-project.org/"
  },
  {
    "objectID": "Resources.html#python-tips",
    "href": "Resources.html#python-tips",
    "title": "Resources",
    "section": "Python tips",
    "text": "Python tips\n\nPython Beginners Guide: https://wiki.python.org/moin/BeginnersGuide/Programmers\nThe Python Tutorial: https://docs.python.org/3/tutorial/index.html\nThe 30 Best Python Libraries and Packages for Beginners: https://www.ubuntupit.com/best-python-libraries-and-packages-for-beginners/\nWhat is os.listdir() in python?: https://www.educative.io/answers/what-is-oslistdir-in-python\nGet unique values from a column in Pandas DataFrame – GeeksforGeeks: https://www.geeksforgeeks.org/get-unique-values-from-a-column-in-pandas-dataframe/\nPython String format(): https://www.programiz.com/python-programming/methods/string/format\nPython - Determine the type of an object? - Stack Overflow: https://stackoverflow.com/questions/2225038/determine-the-type-of-an-object\nGet / check the type of an object in Python: type(), isinstance(): https://note.nkmk.me/en/python-type-isinstance/\nCreate pandas dataframe from lists using zip – GeeksforGeeks: https://www.geeksforgeeks.org/create-pandas-dataframe-from-lists-using-zip/?ref=rp\nUnit Testing for Data Scientists. Using Pytest to improve the stability: https://towardsdatascience.com/unit-testing-for-data-scientists-dc5e0cd397fb\nThe Python Tutorial: https://docs.python.org/3/tutorial/index.html#tutorial-index"
  },
  {
    "objectID": "Resources.html#r-tips",
    "href": "Resources.html#r-tips",
    "title": "Resources",
    "section": "R tips",
    "text": "R tips\n\nR Colors: https://www.r-bloggers.com/2012/10/palettes-in-r/\nR colors resource: https://r-charts.com/colors/\nR colors chart: https://rstudio-pubs-static.s3.amazonaws.com/3486_79191ad32cf74955b4502b8530aad627.html\nR chart annotations: https://ggplot2-book.org/annotations.html\nR Camcoder package: https://github.com/thebioengineer/camcorder\nCamcoder package in CRAN: https://cran.r-project.org/web/packages/camcorder/index.html\nCreate design process animations: https://cran.r-project.org/web/packages/camcorder/vignettes/camcorder_record.html\nHTML widgets – useful for Shiny and Markdown reports: https://www.htmlwidgets.org/\nCrosstalk to join some widgets together: https://rstudio.github.io/crosstalk/using.html\nR Graph Gallery: https://r-graph-gallery.com/\nInteractive maps in R using Leaflet: https://rstudio.github.io/leaflet/\nInteractive maps in R using Leaflet: https://rstudio.github.io/leaflet/colors.html\nBasic intro to main axis and legend titles: http://www.sthda.com/english/wiki/ggplot2-title-main-axis-and-legend-titles\nSetting up the R environment: https://ohdsi.github.io/Hades/rSetup.html\nHow to do fuzzy matching in R: https://stylizeddata.com/how-to-do-fuzzy-matching-in-r/\nHow to Recode Factor and Character Variables in R: https://stylizeddata.com/how-to-recode-factor-and-character-variables-in-r/\nDesigning aesthetic and publication ready tables in R: https://github.com/kcuilla/fourth_down_go_rates\nHow to Recode Factor and Character Variables in R: https://stylizeddata.com/how-to-recode-factor-and-character-variables-in-r/\nDriving a web browser with RSelenium: https://www.computerworld.com/article/2971265/how-to-drive-a-web-browser-with-r-and-rselenium.html"
  },
  {
    "objectID": "Resources.html#online-r-and-python-books",
    "href": "Resources.html#online-r-and-python-books",
    "title": "Resources",
    "section": "Online R and Python books",
    "text": "Online R and Python books\n\nAn introduction to R - Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto & David Lusseau: https://intro2r.com/\nWelcome to R for Data Science - Hadley Wickham, Garrett Grolemund: https://r4ds.had.co.nz/\nThink Python -How to Think Like a Computer Scientist - Alllen B. Downey: https://greenteapress.com/thinkpython2/html/index.html\nGgplot2 Elegant Graphics for Data Analysis - Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen: https://ggplot2-book.org/index.html\nGgplot2 Elegant Graphics for Data Analysis - Specific chapter about plotting maps in R: https://ggplot2-book.org/maps.html\nGeocomputation with R: https://bookdown.org/robinlovelace/geocompr/spatial-class.html\nChapter 16. Geospatial- The Big book of r: https://www.bigbookofr.com/geospatial.html"
  },
  {
    "objectID": "Resources.html#index",
    "href": "Resources.html#index",
    "title": "Resources",
    "section": "",
    "text": "R and R Eco-system resources\nR tips\nPython tips\nNHS R and Python communities of practice\nR and Python online books"
  },
  {
    "objectID": "Resources.html#maps-in-r-using-ggplot2-and-osm",
    "href": "Resources.html#maps-in-r-using-ggplot2-and-osm",
    "title": "Resources",
    "section": "Maps in R using ggplot2 and OSM",
    "text": "Maps in R using ggplot2 and OSM\n\nAn introduction to plotting maps in R using ggplot2 An introduction to plotting maps in R using ggplot2 can be found on this online book: https://ggplot2-book.org/maps.html\nOpenStreetMap (OSM) Package details: https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html\nOpenStreepMap. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017: https://www.openstreetmap.org/#map=6/54.910/-3.432"
  },
  {
    "objectID": "Resources.html#r-tidyverse-universe",
    "href": "Resources.html#r-tidyverse-universe",
    "title": "Resources",
    "section": "R Tidyverse universe",
    "text": "R Tidyverse universe\nThis section contains set of packages that follow Tidyverse data science principles.\n\ntidyverse\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nThe goal of tidyr is to help you create tidy data. Tidy data is data where: 1. Every column is variable. 2. Every row is an observation. 3. Every cell is a single value.\n\nTidyverse main website: https://www.tidyverse.org/\n\nCore Tidyverse packages:\n\nggplot2: https://ggplot2.tidyverse.org/\ndplyr: https://dplyr.tidyverse.org/\ntidyr: https://tidyr.tidyverse.org/\nreadr: https://readr.tidyverse.org/\npurrr: https://purrr.tidyverse.org/\ntibble: https://tibble.tidyverse.org/\nstringr: https://stringr.tidyverse.org/\nforcats: https://forcats.tidyverse.org/\n\n\n\nRelated Tidyverse packages\n\ndbplyr\ndbplyr is the database backend for dplyr. It allows you to use remote database tables as if they are in-memory data frames by automatically converting dplyr code into SQL.\n\nDBPLYR https://dbplyr.tidyverse.org/\n\nUsing function ‘show_query()’ after a set of DPLYR verbs, allows you to generate the SQL that is sent tot he database when you request the data.\n\n\ntidyselect\nTools like starts_with() or contains() are called selection helpers. These tools inspect the variable names currently available for selection with peek_vars(). The variable names are registered automatically by eval_select() for the duration of the evaluation:\nThese selection helpers match variables according to a given pattern\nstarts_with() : Starts with an exact prefix. ends_with() : Ends with an exact suffix. contains() : Contains a literal string. matches() : Matches a regular expression. num_range() : Matches a numerical range like x01, x02, x03.\nTidyselect website: https://www.tidyverse.org/blog/2022/10/tidyselect-1-2-0/"
  },
  {
    "objectID": "Resources.html#statistics",
    "href": "Resources.html#statistics",
    "title": "Resources",
    "section": "Statistics",
    "text": "Statistics\n\nProbability distributions\nProbability distributions in R: https://poissonisfish.com/2016/12/04/probability-distributions-in-r/\nBayesian models in R: https://www.r-bloggers.com/2019/05/bayesian-models-in-r-2/"
  },
  {
    "objectID": "Resources.html#tables-in-r",
    "href": "Resources.html#tables-in-r",
    "title": "Resources",
    "section": "Tables in R",
    "text": "Tables in R\nSet of R packages to build beautiful Data Tables in R\n\ngt (Easily Create Presentation-Ready Display Tables): https://gt.rstudio.com/\nformattable (produce data structures with formatting rules): https://renkun-ken.github.io/formattable/\nkableExtra (Extend kable tables functionality): https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\ndb (Interesting DT Package introduction from Yihui Xie website: https://rstudio.github.io/DT/\nflextable (Framework for creating tables for reporting and publications): https://ardata-fr.github.io/flextable-book/\nreactablefmtr (formatting tables using the reactable R library.): https://kcuilla.github.io/reactablefmtr/index.html\n\n\nPOSIT Community Table Gallery\nPOSIT Community Table Gallery: https://community.rstudio.com/c/table-gallery/64"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#objective",
    "href": "NHS_R_Pycom_2023.html#objective",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "Objective",
    "text": "Objective\nThis is a tutorial about creating your personal website using Quarto in RStudio (from Posit) and to publish it to GitHub. The website will include a section about R and Python online resources\nPre-requisites\n\nGitHub Account: You must have a GitHub account or create a new one to host your website.\nRStudio: We will push all our code to GitHub using Rstudio (you can use its built in terminal to do it so)\nGit and GitHub: We will use Git integrated within Rstudio to publish the different website files (index.html, about.html, etc) to GitHub. You can also upload files directly to GitHub website repo."
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#presentation-structure",
    "href": "NHS_R_Pycom_2023.html#presentation-structure",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "Presentation structure",
    "text": "Presentation structure\n\nStep 01: Create a new GitHub Account\nStep 02: Create a new repository to host your website on GitHub\nStep 03: Create new folder in your local machine to build your website\nStep 04: Create new RStudio project\nStep 05: Create Quarto website document\nStep 06: Critical step. Change output directory to a new \"docs\" folder"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#presentation-structure-1",
    "href": "NHS_R_Pycom_2023.html#presentation-structure-1",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "Presentation structure",
    "text": "Presentation structure\n\nStep 07: Populate Index file with content and click on \"Render\"\nStep 08: Create new quarto file to populate the new \"resources\" tab in our website\nStep 09: Go to the _quarto.yml and add the new section below the about.qmd line\nStep 10: Go to \"Pages\" left menu on the \"Setting\" main top menu on our Pablo-tester new repo\nStep 11: Push all your website files to GitHub dedicated repo using RStudio\nStep 12: Check all GitHub website sections content is accessible from your browser using website URL"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#create-github-account",
    "href": "NHS_R_Pycom_2023.html#create-github-account",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "01.Create GitHub Account",
    "text": "01.Create GitHub Account\nFor this workshop, I am going to use my GitHub account https://github.com/Pablo-tester. My main GitHub account already includes a personal website: https://github.com/Pablo-source/Pablo-source.github.io"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#local-quarto-website-folder",
    "href": "NHS_R_Pycom_2023.html#local-quarto-website-folder",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "03.Local Quarto website folder",
    "text": "03.Local Quarto website folder\n\n\n\n\nPreviously created local folder named “Build_new_website”\nCreate new R project\nContaining new Quarto Website project."
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#create-quarto-website",
    "href": "NHS_R_Pycom_2023.html#create-quarto-website",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "05.Create Quarto website",
    "text": "05.Create Quarto website\nWe setup the Quarto website using the repository name we created at the start “Pablo-tester.github.io”. This is required for the website to be rendered in GitHub.\n\n\n\n\n\n\n\nOur Quarto website will create a new project folder as a sub-directory of our main folder:~/Documents/Pablo_zorin/Pablo_tester/Build_new_website\n\nTick check box: Create a git repository\nTick check box: Open in a new session"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#set-of-quarto-website-files",
    "href": "NHS_R_Pycom_2023.html#set-of-quarto-website-files",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "05.Set of Quarto website files",
    "text": "05.Set of Quarto website files\nClick on “Create Project” to open the Quarto Website project. Website files included inside new folder “Pablo-tester.github.io”\n\n\n\nIt that will be populated with the following Quarto related files: - quarto.yml\n\n.gitignore\nabout.qmd\nindex.qmd\nstyles.css\nPablo-tester.github.Rproj"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#add-docs-folder-to-yaml-file",
    "href": "NHS_R_Pycom_2023.html#add-docs-folder-to-yaml-file",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "06. Add docs folder to yaml file",
    "text": "06. Add docs folder to yaml file\nWhen rendering a Quarto documents, quarto saves the rendered website to output directory by default.\nTo host your Quarto website using GitHub pages, change this setup to point to a new docs folder.\n\nChange output directory to a new docs folder"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#populate-index-file-with-content",
    "href": "NHS_R_Pycom_2023.html#populate-index-file-with-content",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "07. Populate Index file with content",
    "text": "07. Populate Index file with content\nOpen the Index.qmd file, populate it with content and click on Render. Include content about the general purpose of this website.\n\n\n\n\n\n\n\nThis action will create a new docs folder on your Files pane. Now our Quarto website is ready to be pushed to GitHub, so it would be rendered using GitHub Pages."
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#fill-resources-content",
    "href": "NHS_R_Pycom_2023.html#fill-resources-content",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "08. Fill Resources content",
    "text": "08. Fill Resources content\nCreate new quarto file to populate resources tab in our website\nIn Rstudio click File > New File > Quarto document. Name this new Quarto file Resources"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#add-new-section-to-quarto.yml-file",
    "href": "NHS_R_Pycom_2023.html#add-new-section-to-quarto.yml-file",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "09. Add new section to quarto.yml file",
    "text": "09. Add new section to quarto.yml file\nModify _quarto.yml file content to include new quarto file resources.qmd as a new website section.\n\nClick on save to keep the changes introduced to this _quarto.yml file.\nThe HTML output file from resources tab is saved in the /docs folder."
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#set-branch-to-docs-folder",
    "href": "NHS_R_Pycom_2023.html#set-branch-to-docs-folder",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "10. Set branch to docs folder",
    "text": "10. Set branch to docs folder\nFrom setting menu search for Pages left side menu. In this Pages left menu, under branch section: Instead of /root folder, navigate and select /docs folder instead. And then save changes applied"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#in-rstudio-push-website-to-github",
    "href": "NHS_R_Pycom_2023.html#in-rstudio-push-website-to-github",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "11. In RStudio push website to GitHub",
    "text": "11. In RStudio push website to GitHub\nFrom RStudio, push all your website files to the GitHub to update your website content."
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#check-github-website-from-browser",
    "href": "NHS_R_Pycom_2023.html#check-github-website-from-browser",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "12. Check GitHub website from browser",
    "text": "12. Check GitHub website from browser\nNow our website is up and running, Access it from GitHub website URL\nhttps://pablo-tester.github.io/"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#resourcesfurther-topics",
    "href": "NHS_R_Pycom_2023.html#resourcesfurther-topics",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "13. Resources/Further topics",
    "text": "13. Resources/Further topics\n\nTutorial for Creating a new RStudio project with GitHub to visualize climate change (CC213). Riffomonas Project https://www.youtube.com/watch?v=d5dUkO5lXds&list=PLmNrK_nkqBpLdTEOj\\_-bwp58490i8ezRI&index=9\nRepository “climate_viz” on my main GitHub account: https://github.com/Pablo-source/climate_viz\nRepository using Git and the terminal to commit changes to GitHub: https://github.com/Pablo-tester/housing_pipelines\n\nFurther topics\n\nSettings: (Manage Pipeline to deploy website):“Re-run all jobs” to ensure Quarto website is rendered\nSetup SSH security setting to clone repo and apply changes using Git and the Terminal instead of Rstudio:\nCreate a public/private RSA key pair to use SSH instead of URL to commit changes to GitHub"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#any-questions",
    "href": "NHS_R_Pycom_2023.html#any-questions",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "Any questions?",
    "text": "Any questions?\n\nPablo Leon-Rodenas\nemail: pablo.leonrodenas@nhs.net\nMy GitHub Repo: https://github.com/Pablo-source\nSlides: https://pablo-source.github.io/NHS_R_Pycom_2023.html#/title-slide\nQuarto slides R script: https://github.com/Pablo-source/Pablo-source.github.io/blob/main/NHS_R_Pycom_2023.qmd\nTHANKS !!\n\n\n\n\nhttps://github.com/Pablo-source"
  },
  {
    "objectID": "NHS_R_Pycom_2023.html#check-github-website",
    "href": "NHS_R_Pycom_2023.html#check-github-website",
    "title": "Create Quarto website using RStudio and GitHub",
    "section": "12. Check GitHub website",
    "text": "12. Check GitHub website\nNow our website is up and running, Access it from GitHub website URL\nhttps://pablo-tester.github.io/"
  },
  {
    "objectID": "Annotations.html",
    "href": "Annotations.html",
    "title": "Annotated ggplot2 charts",
    "section": "",
    "text": "This is a small tutorial on how to annotate custom ggplot charts. GGPLOT2 includes shadowed boxes, arrows and text to highlight specific data points in charts, helping to drive the story telling, communicating meaningful information using plots and visualization elements in R."
  },
  {
    "objectID": "Annotations.html#about",
    "href": "Annotations.html#about",
    "title": "Annotated ggplot2 charts",
    "section": "",
    "text": "This is a small tutorial on how to annotate custom ggplot charts. GGPLOT2 includes shadowed boxes, arrows and text to highlight specific data points in charts, helping to drive the story telling, communicating meaningful information using plots and visualization elements in R."
  },
  {
    "objectID": "Annotations.html#download-ae-data",
    "href": "Annotations.html#download-ae-data",
    "title": "Annotated ggplot2 charts",
    "section": "1. Download A&E data",
    "text": "1. Download A&E data\nThe plot we will build and annotate will use NHS England A&E England Attendances data. We choose to download England Time Series data available from NHS England Statistics section main website.\n\n1.1 NHS England A&E Attendances and Emergency Admissions data\nWe download from NHS England the existing publicly available A&E England Attendances and Emergency Admissions from thier main website: https://www.england.nhs.uk/statistics/statistical-work-areas/ae-waiting-times-and-activity/\nWe use GET() function from {httr} library to download A&E data from NHS England URL\nThe Weekly and Monthly A&E Attendances and Emergency Admissions collection collects the total number of attendances in the specified period for all A&E types, including Urgent Treatment Centres, Minor Injury Units and Walk-in Centres, and of these, the number discharged, admitted or transferred within four hours of arrival.\n\n\n1.2 Download tidy A&E data\nWe can make use of the {janitor} package to download A&E data and to obtain column names that ease further daat manipulation\n\n\nCode\nlibrary(httr)\n# CLEAN DATA SET\n# Cleaned data set with all variable as Integers\nurl1<-'https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2023/10/Monthly-AE-Time-Series-September-2023.xls'\nGET(url1, write_disk(tf <- tempfile(fileext = \".xls\")))\n\n\nResponse [https://www.england.nhs.uk/statistics/wp-content/uploads/sites/2/2023/10/Monthly-AE-Time-Series-September-2023.xls]\n  Date: 2024-02-01 12:45\n  Status: 200\n  Content-Type: application/vnd.ms-excel\n  Size: 404 kB\n<ON DISK>  C:\\Users\\PABLOL~1\\AppData\\Local\\Temp\\RtmpygZwwP\\file5f6829c985b.xls\n\n\nCode\nMONTHLY_AE <- read_excel(tf, 2L,\n                         col_names = TRUE,\n                         col_types = c(\"date\",\"numeric\",\"numeric\",\"numeric\",\n                                       \"numeric\",\"numeric\",\"numeric\",\n                                       \"numeric\",\"numeric\",\"numeric\",\n                                       \"numeric\",\"numeric\",\"numeric\"),skip =13) %>% \n                        clean_names() %>% \n                        select(period,\n                               type_1 = type_1_departments_major_a_e_2,\n                               type_2 = type_2_departments_single_specialty_3,\n                               type_3 = type_3_departments_other_a_e_minor_injury_unit_4) %>%\n            # Apply right format to get AE attendances as Numeric values\n                        mutate(\n                          type_1_num = as.integer(type_1),\n                          type_2_num = as.integer(type_2),\n                          type_3_num = as.integer(type_3)) %>% \n            # Retain just formatted colmns \n                        select(period,type_1_num,type_2_num,type_3_num)\n\nstr(MONTHLY_AE)\n\n\ntibble [155 x 4] (S3: tbl_df/tbl/data.frame)\n $ period    : POSIXct[1:155], format: \"2010-11-01\" \"2010-12-01\" ...\n $ type_1_num: int [1:155] 1065456 1070728 1061897 1007384 1167089 1140917 1168080 1117614 1167234 1091366 ...\n $ type_2_num: int [1:155] 53584 45395 51420 51153 57694 53787 56642 54549 55995 51774 ...\n $ type_3_num: int [1:155] 485550 531699 541588 493882 579483 592289 594166 561550 596844 569890 ...\n\n\nCode\nMONTHLY_AE\n\n\n# A tibble: 155 x 4\n   period              type_1_num type_2_num type_3_num\n   <dttm>                   <int>      <int>      <int>\n 1 2010-11-01 00:00:00    1065456      53584     485550\n 2 2010-12-01 00:00:00    1070728      45395     531699\n 3 2011-01-01 00:00:00    1061897      51420     541588\n 4 2011-02-01 00:00:00    1007384      51153     493882\n 5 2011-03-01 00:00:00    1167089      57694     579483\n 6 2011-04-01 00:00:00    1140917      53787     592289\n 7 2011-05-01 00:00:00    1168080      56642     594166\n 8 2011-06-01 00:00:00    1117614      54549     561550\n 9 2011-07-01 00:00:00    1167234      55995     596844\n10 2011-08-01 00:00:00    1091366      51774     569890\n# i 145 more rows\n\n\nCheck start and end period of this A&E Time series data:\n\n\n[1] \"2010-11-01 UTC\"\n\n\n[1] \"2023-09-01 UTC\"\n\n\nThis data set from NHS England, includes includes England Time Series data for Type 1, Type 2 and Type 3 Attendances covering the period that starts on 2010-11-01 and ends on 2023-09-01 as we can see in the table below:"
  },
  {
    "objectID": "Annotations.html#we-might-need-to-change-date-format",
    "href": "Annotations.html#we-might-need-to-change-date-format",
    "title": "Annotated ggplot2 charts",
    "section": "5.3 We might need to change Date format",
    "text": "5.3 We might need to change Date format\nAfter importing the data into R, date variables are defined as POSIX date, we can change them to standard Date R format.\n\n\nCode\nstr(TypeI)\n\n\ntibble [155 × 2] (S3: tbl_df/tbl/data.frame)\n $ period    : POSIXct[1:155], format: \"2010-11-01\" \"2010-12-01\" ...\n $ type_1_num: int [1:155] 1065456 1070728 1061897 1007384 1167089 1140917 1168080 1117614 1167234 1091366 ...\n\n\nCode\nTypeI_date_format &lt;- TypeI %&gt;% mutate(Datef = as.Date(period))\nTypeI_date_format\n\n\n# A tibble: 155 × 3\n   period              type_1_num Datef     \n   &lt;dttm&gt;                   &lt;int&gt; &lt;date&gt;    \n 1 2010-11-01 00:00:00    1065456 2010-11-01\n 2 2010-12-01 00:00:00    1070728 2010-12-01\n 3 2011-01-01 00:00:00    1061897 2011-01-01\n 4 2011-02-01 00:00:00    1007384 2011-02-01\n 5 2011-03-01 00:00:00    1167089 2011-03-01\n 6 2011-04-01 00:00:00    1140917 2011-04-01\n 7 2011-05-01 00:00:00    1168080 2011-05-01\n 8 2011-06-01 00:00:00    1117614 2011-06-01\n 9 2011-07-01 00:00:00    1167234 2011-07-01\n10 2011-08-01 00:00:00    1091366 2011-08-01\n# ℹ 145 more rows\n\n\n\n5.4 Define date breaks for x axis\nWe have several years in our data set\n\n\nCode\nlibrary(lubridate)\nYears_in_data &lt;- TypeI_date_format %&gt;%  \n                 select (Datef) %&gt;% \n                 mutate(Year = year(Datef)) %&gt;% \n                 select(Year) %&gt;% \n                 distinct()\nYears_in_data\n\n\n# A tibble: 14 × 1\n    Year\n   &lt;dbl&gt;\n 1  2010\n 2  2011\n 3  2012\n 4  2013\n 5  2014\n 6  2015\n 7  2016\n 8  2017\n 9  2018\n10  2019\n11  2020\n12  2021\n13  2022\n14  2023\n\n\n\n\nCode\nTotal_years &lt;- count(distinct(Years_in_data))\nTotal_years\n\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    14\n\n\nThere are 14 years of data in the original data set.\nIn the chart below, we can see the X axis only displays two years out of the 14 available in the data set. The way to fix it is by using scale_x_data() function defining labels as years ‘%Y’ with date_breaks defined as ‘1 year’ so X axis will display every single year in the data set.\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") \nBasic_plot_format\n\n\n\n\n\n\n\n5.5 Apply theme to the plot\nWe can apply defined theme() setup to the chart. There are several to choose from:(theme_bw(), theme_dark(), them_grey(), theme_light(), theme_minimal(), theme_classic() ) . I will choose theme_minimal() as this will provide a lower inks ratio outcome.\nWe apply then theme_minimal() to the existing ggplot chart\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\n\n\n5.6 Finally we apply colour to the line chart\nWe apply inside geom_line() function two parameters colour to add colour to the existing line and also we include size parameter equal to 1 to increase the size of the line used in the chart:\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\nThen we can save this plot as an initial basic chart\n\n\nCode\nggsave(\"plots/01_AE_Attendances_basic_plot.png\", width = 6, height = 4)\n\n\nAnother variation would be to include a line chart geom_line() and a dot chart geom_point() combined\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\n\n\nCode\nggsave(\"plots/02_AE_Attendances_line_point_plot.png\", width = 6, height = 4)\n\n\n\n\n6. Add annotations to plot\nThe next step will include several annotations to the chart to help the storytelling part when using this chart.\n\n6.1 Using annotate() function\n\n\n6.1.1 Add rectangle annotation\nWe can start by adding a rectangle to the previous chart\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',\n    xmin = as.Date(\"2018-11-01\"), xmax = as.Date(\"2019-11-01\"),\n    ymin = 700000, ymax = 1100000, \n    alpha = 0.5,\n    fill = 'grey40',\n    col = 'black'\n  )\nBasic_plot_format\n\n\n\n\n\n\n\n6.1.2 Add text annotation\nWe can start by adding a rectangle to the previous chart Adding a text annotation:\nCOVID pandemic\n\nCOVID-19 was confirmed to be present in the UK by the end of January 2020\nA legally-enforced Stay at Home Order, or lockdown, was introduced on 23 March 2021, banning all non-essential travel and contact with other people, and shut schools, businesses, venues and gathering places.\nA third wave of daily infections began in July 2021 due to the arrival and rapid spread of the highly transmissible SARS-CoV-2 Delta variant.[62]\n\nSo we can establish the COVID-19 pandemic period roughly from 01 January 2020 to 01 August 2021\n\n\nCode\nBasic_plot_format &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1120000,label = \"COVID-19\")\n  \nBasic_plot_format\n\n\n\n\n\n\n\n6.1.3 Add an arrow to point to single values\nWe can also add a curved line with an arrow at the end pointing to specific values\nNote that the annotate() function is a good alternative that can reduces the code length for simple cases.\n\n\nCode\nCurved_line_annotation &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1120000,label = \"COVID-19\") +\n    annotate('curve',\n    x = as.Date(\"2018-10-01\"),\n    xend = as.Date(\"2019-12-01\"),\n    y = 620000,\n    yend = 520000,\n    linewidth = 1, \n    curvature = 0.5,\n    # Adding an Arrow to my curvature\n    arrow = arrow(length = unit(0.4,'cm'))) +\n    annotate('text',x = as.Date(\"2018-06-27\"),y = 700000,label = \"Lowest \\n Attendances level\")\n  \nCurved_line_annotation\n\n\n\n\n\n\n\nCode\nggsave(\"plots/07_AE_Attendances_annotations_plot.png\", width = 6, height = 4)\n\n\n\n\n6.1.4 Include Lockdown dates and reference line\nIn this new section we will include three vertical lines for each of the lock downs and a horizontal line to reference the Attendances level before the pandemic.\nSet of geoms used in charts to annotate different sections:\n\nrectangle: when annotate() argument takes ‘react’ value. This displays a rectable in the GGPLOT chart defined by x and Y coordinates, and also color and transparency argument (alpha).\nReference:https://r-graphics.org/recipe-annotate-rect\ntext: when annotate() argument takes ‘text’ value. This argument displays a text in the chart. Text content defined by label argument, and color, text position in the chart defined by x and y coordinates.\nReference:https://r-graphics.org/recipe-annotate-text\ncurve:when annotate() argument takes ‘curve’ value. This displays a curved segment.\nReference:https://stackoverflow.com/questions/53858124/r-how-to-annotate-curves\narrow:when annotate() argument takes ‘arrow’ value. This displays a pointy end segment.\nReference:https://r-graphics.org/recipe-annotate-segment\n\nDraw lines across the chart:\n\ngeom_vline: This geom allows you to annotate the plot with vertical lines. It has a xintercept argument and also a color and size arguments.\nReference: https://ggplot2.tidyverse.org/reference/geom_abline.html\ngeom_segment: geom_segment will only draw between specific end points. It helps to make a data frame with the relevant information for drawing the lines.\nReference: https://ggplot2.tidyverse.org/reference/geom_segment.html\n\n\n\nCode\nCurved_line_annotation &lt;- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1130000,label = \"COVID-19\", color=\"red\",size = 5) +\n    annotate('curve',\n    x = as.Date(\"2018-10-01\"),\n    xend = as.Date(\"2019-12-01\"),\n    y = 620000,\n    yend = 520000,\n    linewidth = 1, \n    curvature = 0.5,\n    # Adding an Arrow to my curvature\n    arrow = arrow(length = unit(0.2,'cm'))) +\n    annotate('text',x = as.Date(\"2018-06-27\"),y = 700000,label = \"Lowest \\n Attendances level\") +\n    #ADD LOCKDOWN DATES REFERENCE LINES\n    # Replacing vline by geom_segment (it allows controlling for reference lines lenght)\n    # First lockdown  26 March 2020\n    geom_segment(aes(x = as.Date(\"2020-03-26\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2020-03-26\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n      # Second Lockdown 5 November 2020\n    geom_segment(aes(x = as.Date(\"2020-11-05\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2020-11-05\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n    # Third lockdown 6 January 2021\n    geom_segment(aes(x = as.Date(\"2021-01-06\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2021-01-06\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n    # Text annotations for each lockdown\n\n    annotate('text',x = as.Date(\"2019-07-20\"),y = 1200000,label = \"First lockdown\") +\n    annotate('text',x = as.Date(\"2019-05-26\"),y = 1164000,label = \"01/08/2020\") +\n    annotate('text',x = as.Date(\"2022-10-20\"),y = 1100000,label = \"Second lockdown\") +\n    annotate('text',x = as.Date(\"2023-04-20\"),y = 1070000,label = \"05/11/2020\") +\n    annotate('text',x = as.Date(\"2022-10-20\"),y = 980000,label = \"Third lockdown\") +\n    annotate('text',x = as.Date(\"2023-04-20\"),y = 950000,label = \"06/01/2021\") +\n  # Adding arrows to lockdowns labels \n  # First lockdown arrow \n   annotate('curve',x = as.Date(\"2019-06-01\"),xend = as.Date(\"2020-02-20\"),\n            y = 1140000,yend = 1090000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +\n  # Second lockdown arrow\n     annotate('curve',x = as.Date(\"2022-01-01\"),xend = as.Date(\"2020-11-01\"),y = 1080000,yend = 970000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +\n  # Third lockdown arrow\n   annotate('curve',x = as.Date(\"2022-01-01\"),xend = as.Date(\"2021-02-01\"),y = 990000,yend = 910000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) \nCurved_line_annotation\n\n\n\n\n\nList of lockdown relevant dates:\nFirst national lockdown (March to June 2020)\nEngland was in national lockdown between late March and June 2020. Lockdown measures legally came into force for the first time on 26 March 2020.\nFirst nationwide lockdown was legally effective from 1:00pm on 26th March 2020.\nInitially, all “non-essential” high street businesses were closed and people were ordered to stay at home, permitted to leave for essential purposes only, such as buying food or for medical reasons. Starting in May 2020, the laws were slowly relaxed. People were permitted to leave home for outdoor recreation (beyond exercise) from 13 May. On 1 June, the restriction on leaving home was replaced with a requirement to be home overnight, and people were permitted to meet outside in groups of up to six people.\nSecond national lockdown (November 2020)\nOn 5 November 2020, national restrictions were reintroduced in England. During the second national lockdown, non-essential high street businesses were closed, and people were prohibited from meeting those not in their “support bubble” inside. People could leave home to meet one person from outside their support bubble outdoors.\nThird national lockdown (January to March 2021)\nFollowing concerns that the four-tier system was not containing the spread of the Alpha variant, national restrictions were reintroduced for a third time on 6 January 2021.\nThe rules during the third lockdown were more like those in the first lockdown. People were once again told to stay at home. However, people could still form support bubbles (if eligible) and some gatherings were exempted from the gatherings ban (for example, religious services and some small weddings were permitted).\nReference for National lockdown dates: https://commonslibrary.parliament.uk/research-briefings/cbp-9068/"
  },
  {
    "objectID": "Annotations.html#present-tables-using-gt-package",
    "href": "Annotations.html#present-tables-using-gt-package",
    "title": "Annotated ggplot2 charts",
    "section": "2. Present tables using GT package",
    "text": "2. Present tables using GT package\nThe gt package is all about making it simple to produce nice-looking display tables. We can use it to improve how we present the previous table:\nFirst we will filter the original data set to include just 2023 data\n\n\nCode\nMONTHLY_AE_sub <- MONTHLY_AE %>% \nfilter(period >= '2023-01-01')\nMONTHLY_AE_sub\n\n\n# A tibble: 9 x 4\n  period              type_1_num type_2_num type_3_num\n  <dttm>                   <int>      <int>      <int>\n1 2023-01-01 00:00:00     632299      34327     607412\n2 2023-02-01 00:00:00     598368      33612     588390\n3 2023-03-01 00:00:00     681584      38023     663719\n4 2023-04-01 00:00:00     677126      34498     638453\n5 2023-05-01 00:00:00     740252      37249     698619\n6 2023-06-01 00:00:00     835710      44292     748918\n7 2023-07-01 00:00:00     840480      43664     739830\n8 2023-08-01 00:00:00     782158      42366     712635\n9 2023-09-01 00:00:00     789191      40887     721379\n\n\n\n\nCode\nlibrary(gt)\n# Turn previous table into a gt table\nMONTHLY_AE_tbl <-  MONTHLY_AE %>% \nfilter(period >= '2023-01-01')\nae_gt_tbl <- gt(MONTHLY_AE_tbl) %>% \n    tab_header(\n    title = md(\"**A&E Attendances in England 2023**\"),\n    subtitle = md(\"By type (*Type I*,*Type II*,*Type III)*\")\n  ) %>% \n    tab_source_note(\n    source_note = \"Source: NHS England A&E Attendances and Emergency Admissions data\"\n  ) |>\n  tab_source_note(\n    source_note = md(\"England Time Series monthly data\")\n  ) %>% \n      fmt_number(\n    columns = c(type_1_num,type_2_num,type_3_num),\n    sep_mark = \",\",\n    decimals = 0\n  )\nae_gt_tbl \n\n\n\n\n\n\n  \n    \n      A&E Attendances in England 2023\n    \n    \n      By type (Type I,Type II,Type III)\n    \n    \n      period\n      type_1_num\n      type_2_num\n      type_3_num\n    \n  \n  \n    2023-01-01\n632,299\n34,327\n607,412\n    2023-02-01\n598,368\n33,612\n588,390\n    2023-03-01\n681,584\n38,023\n663,719\n    2023-04-01\n677,126\n34,498\n638,453\n    2023-05-01\n740,252\n37,249\n698,619\n    2023-06-01\n835,710\n44,292\n748,918\n    2023-07-01\n840,480\n43,664\n739,830\n    2023-08-01\n782,158\n42,366\n712,635\n    2023-09-01\n789,191\n40,887\n721,379\n  \n  \n    \n      Source: NHS England A&E Attendances and Emergency Admissions data\n    \n    \n      England Time Series monthly data"
  },
  {
    "objectID": "Annotations.html#subset-type-i-attendances",
    "href": "Annotations.html#subset-type-i-attendances",
    "title": "Annotated ggplot2 charts",
    "section": "3. Subset Type I attendances",
    "text": "3. Subset Type I attendances\nWe will focus on Type I attendances for this plot\n\n\nCode\nlibrary(gt)\n# Turn previous table into a gt table\nTypeI  <-  MONTHLY_AE %>% \nselect(period,type_1_num)\nTypeI\n\n\n# A tibble: 155 x 2\n   period              type_1_num\n   <dttm>                   <int>\n 1 2010-11-01 00:00:00    1065456\n 2 2010-12-01 00:00:00    1070728\n 3 2011-01-01 00:00:00    1061897\n 4 2011-02-01 00:00:00    1007384\n 5 2011-03-01 00:00:00    1167089\n 6 2011-04-01 00:00:00    1140917\n 7 2011-05-01 00:00:00    1168080\n 8 2011-06-01 00:00:00    1117614\n 9 2011-07-01 00:00:00    1167234\n10 2011-08-01 00:00:00    1091366\n# i 145 more rows"
  },
  {
    "objectID": "Annotations.html#building-ggplot2-charts",
    "href": "Annotations.html#building-ggplot2-charts",
    "title": "Annotated ggplot2 charts",
    "section": "4. Building ggplot2 charts",
    "text": "4. Building ggplot2 charts\nWe start by building a bare minimum ggplot2 line chart. This basic line chart includes ggplot2() function with aes() argument including x and y variables, and the geom.\nThere are four main parts of a basic ggplot2 visualization: the ggplot() function, the data parameter, the aes() function, and the geom. Get an accurate description from each of these elements from: https://www.sharpsightlabs.com/blog/ggplot2-tutorial/\nThe ggplot function The ggplot() function is the core function of ggplot2. It initiates plotting.\n\n\nCode\nBasic_plot <- ggplot(data = TypeI, aes(x = period, y = type_1_num)) +\n  geom_line()\nBasic_plot\n\n\n\n\n\n\n4.1 Add title and subtitle\nThe first element we want to include in our chart is the tile and subtitle\n\n\nCode\nBasic_plot <- ggplot(data = TypeI, aes(x = period, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\")\nBasic_plot\n\n\n\n\n\n\n\n4.2 Change axis labels\nWe can use labs to change also x and y axis labels\n\n\nCode\nBasic_plot <- ggplot(data = TypeI, aes(x = period, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\")\nBasic_plot\n\n\n\n\n\n\n\n4.3 We might need to change Date format\nAfter importing the data into R, date variables are defined as POSIX date, we can change them to standard Date R format.\n\n\nCode\nstr(TypeI)\n\n\ntibble [155 x 2] (S3: tbl_df/tbl/data.frame)\n $ period    : POSIXct[1:155], format: \"2010-11-01\" \"2010-12-01\" ...\n $ type_1_num: int [1:155] 1065456 1070728 1061897 1007384 1167089 1140917 1168080 1117614 1167234 1091366 ...\n\n\nCode\nTypeI_date_format <- TypeI %>% mutate(Datef = as.Date(period))\nTypeI_date_format\n\n\n# A tibble: 155 x 3\n   period              type_1_num Datef     \n   <dttm>                   <int> <date>    \n 1 2010-11-01 00:00:00    1065456 2010-11-01\n 2 2010-12-01 00:00:00    1070728 2010-12-01\n 3 2011-01-01 00:00:00    1061897 2011-01-01\n 4 2011-02-01 00:00:00    1007384 2011-02-01\n 5 2011-03-01 00:00:00    1167089 2011-03-01\n 6 2011-04-01 00:00:00    1140917 2011-04-01\n 7 2011-05-01 00:00:00    1168080 2011-05-01\n 8 2011-06-01 00:00:00    1117614 2011-06-01\n 9 2011-07-01 00:00:00    1167234 2011-07-01\n10 2011-08-01 00:00:00    1091366 2011-08-01\n# i 145 more rows\n\n\n\n\n4.4 Define date breaks for x axis\nWe have several years in our data set\n\n\nCode\nlibrary(lubridate)\nYears_in_data <- TypeI_date_format %>%  \n                 select (Datef) %>% \n                 mutate(Year = year(Datef)) %>% \n                 select(Year) %>% \n                 distinct()\nYears_in_data\n\n\n# A tibble: 14 x 1\n    Year\n   <dbl>\n 1  2010\n 2  2011\n 3  2012\n 4  2013\n 5  2014\n 6  2015\n 7  2016\n 8  2017\n 9  2018\n10  2019\n11  2020\n12  2021\n13  2022\n14  2023\n\n\n\n\nCode\nTotal_years <- count(distinct(Years_in_data))\nTotal_years\n\n\n# A tibble: 1 x 1\n      n\n  <int>\n1    14\n\n\nThere are 14 years of data in the original data set.\nIn the chart below, we can see the X axis only displays two years out of the 14 available in the data set. The way to fix it is by using scale_x_data() function defining labels as years ‘%Y’ with date_breaks defined as ‘1 year’ so X axis will display every single year in the data set.\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") \nBasic_plot_format\n\n\n\n\n\n\n\n4.5 Apply theme to the plot\nWe can apply defined theme() setup to the chart. There are several to choose from:(theme_bw(), theme_dark(), them_grey(), theme_light(), theme_minimal(), theme_classic() ) . I will choose theme_minimal() as this will provide a lower inks ratio outcome.\nWe apply then theme_minimal() to the existing ggplot chart\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line() +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\n\n\n4.6 Finally we apply colour to the line chart\nWe apply inside geom_line() function two parameters colour to add colour to the existing line and also we include size parameter equal to 1 to increase the size of the line used in the chart:\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\nThen we can save this plot as an initial basic chart\n\n\nCode\nggsave(\"plots/01_AE_Attendances_basic_plot.png\", width = 6, height = 4)\n\n\nAnother variation would be to include a line chart geom_line() and a dot chart geom_point() combined\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal()\nBasic_plot_format\n\n\n\n\n\n\n\nCode\nggsave(\"plots/02_AE_Attendances_line_point_plot.png\", width = 6, height = 4)"
  },
  {
    "objectID": "Annotations.html#add-annotations-to-plot",
    "href": "Annotations.html#add-annotations-to-plot",
    "title": "Annotated ggplot2 charts",
    "section": "5. Add annotations to plot",
    "text": "5. Add annotations to plot\nThe next step will include several annotations to the chart to help the storytelling part when using this chart.\n\n5.1 Using annotate() function\nFrom {ggplot2} package we use the annotate() function to create an annotation layer in the chart. This function is highly versatile as it allows us to include both text and geoms such as lines and arrows.\nWe then only require one extra function geom_segment() also from ggplot2 to draw straight vertical or horizontal reference lines in the chart area.\n\n5.1.1 Adding rectangle annotation\nWe can start by adding a rectangle to the previous chart\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',\n    xmin = as.Date(\"2018-11-01\"), xmax = as.Date(\"2019-11-01\"),\n    ymin = 700000, ymax = 1100000, \n    alpha = 0.5,\n    fill = 'grey40',\n    col = 'black'\n  )\nBasic_plot_format\n\n\n\n\n\n\n\n5.1.2 Adding text annotation\nWe can start by adding a rectangle to the previous chart Adding a text annotation:\nCOVID pandemic\n\nCOVID-19 was confirmed to be present in the UK by the end of January 2020\nA legally-enforced Stay at Home Order, or lockdown, was introduced on 23 March 2021, banning all non-essential travel and contact with other people, and shut schools, businesses, venues and gathering places.\nA third wave of daily infections began in July 2021 due to the arrival and rapid spread of the highly transmissible SARS-CoV-2 Delta variant.[62]\n\nSo we can establish the COVID-19 pandemic period roughly from 01 January 2020 to 01 August 2021\n\n\nCode\nBasic_plot_format <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1120000,label = \"COVID-19\")\n  \nBasic_plot_format\n\n\n\n\n\n\n\n5.1.3 Adding arrows to highlight single values\nWe can also add a curved line with an arrow at the end pointing to specific values. We need to include the arrow function to the curve annotation created earlier: arrow = arrow(length = unit(0.4,'cm')))\nNote that the annotate() function is a good alternative that can reduces the code length for simple cases."
  },
  {
    "objectID": "Annotations.html#annotated-ggplot-chart-including-arrows-and-rectangles",
    "href": "Annotations.html#annotated-ggplot-chart-including-arrows-and-rectangles",
    "title": "Annotated ggplot2 charts",
    "section": "6. Annotated ggplot chart including Arrows and rectangles",
    "text": "6. Annotated ggplot chart including Arrows and rectangles\nThis would be the annotated chart including shadowed rectangle are and an arrow with text to highlight specific data points in the plot area.\n\n\nCode\nCurved_line_annotation <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n \n    annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1120000,label = \"COVID-19\") +\n    annotate('curve',\n    x = as.Date(\"2018-10-01\"),\n    xend = as.Date(\"2019-12-01\"),\n    y = 620000,\n    yend = 520000,\n    linewidth = 1, \n    curvature = 0.5,\n    # Adding an Arrow to my curvature\n    arrow = arrow(length = unit(0.4,'cm'))) +\n    annotate('text',x = as.Date(\"2018-06-27\"),y = 700000,label = \"Lowest \\n Attendances level\")\n  \nCurved_line_annotation\n\n\n\n\n\n\n\nCode\nggsave(\"plots/07_AE_Attendances_annotations_plot.png\", width = 6, height = 4)"
  },
  {
    "objectID": "Annotations.html#including-vertical-reference-lines",
    "href": "Annotations.html#including-vertical-reference-lines",
    "title": "Annotated ggplot2 charts",
    "section": "7. Including vertical reference lines",
    "text": "7. Including vertical reference lines\nIn this new section we will include three vertical lines for each of the lock downs, the functions below can also be used to draw horizontal reference lines.\nSet of geoms used in charts to annotate different sections:\n\nrectangle: when annotate() argument takes ‘react’ value. This displays a rectable in the GGPLOT chart defined by x and Y coordinates, and also color and transparency argument (alpha).\nReference:https://r-graphics.org/recipe-annotate-rect\ntext: when annotate() argument takes ‘text’ value. This argument displays a text in the chart. Text content defined by label argument, and color, text position in the chart defined by x and y coordinates.\nReference:https://r-graphics.org/recipe-annotate-text\ncurve:when annotate() argument takes ‘curve’ value. This displays a curved segment.\nReference:https://stackoverflow.com/questions/53858124/r-how-to-annotate-curves\narrow:when annotate() argument takes ‘arrow’ value. This displays a pointy end segment.\nReference:https://r-graphics.org/recipe-annotate-segment\n\nDraw lines across the chart:\n\ngeom_vline: This geom allows you to annotate the plot with vertical lines. It has a xintercept argument and also a color and size arguments.\nReference: https://ggplot2.tidyverse.org/reference/geom_abline.html\ngeom_segment: geom_segment will only draw between specific end points. It helps to make a data frame with the relevant information for drawing the lines.\nReference: https://ggplot2.tidyverse.org/reference/geom_segment.html\n\n\n\nCode\nCurved_line_annotation <- ggplot(data = TypeI_date_format, aes(x = Datef, y = type_1_num)) +\n  geom_line(color=\"#69b3a2\", size =1) +\n  geom_point(shape=21, color=\"black\", fill=\"#69b3a2\", size=1.5) +\n  labs(title = \"Type I A&E Attendances in England\",\n       subtitle = \"2010-2023 Period\",\n       x = \"Date\",\n       y = \"Total Attendances\") + \n scale_x_date(date_labels=\"%Y\",date_breaks  =\"1 year\") +\n theme_minimal() +\n annotate('rect',xmin = as.Date(\"2020-01-01\"), xmax = as.Date(\"2021-08-01\"),ymin = 500000, ymax = 1100000, \n    alpha = 0.1 , fill = 'blue',col = 'black') +\n    annotate('text',x = as.Date(\"2020-09-01\"),y = 1130000,label = \"COVID-19\", color=\"red\",size = 5) +\n    annotate('curve',\n    x = as.Date(\"2018-10-01\"),\n    xend = as.Date(\"2019-12-01\"),\n    y = 620000,\n    yend = 520000,\n    linewidth = 1, \n    curvature = 0.5,\n    # Adding an Arrow to my curvature\n    arrow = arrow(length = unit(0.2,'cm'))) +\n    annotate('text',x = as.Date(\"2018-06-27\"),y = 700000,label = \"Lowest \\n Attendances level\") +\n    #ADD LOCKDOWN DATES REFERENCE LINES\n    # Replacing vline by geom_segment (it allows controlling for reference lines lenght)\n    # First lockdown  26 March 2020\n    geom_segment(aes(x = as.Date(\"2020-03-26\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2020-03-26\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n      # Second Lockdown 5 November 2020\n    geom_segment(aes(x = as.Date(\"2020-11-05\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2020-11-05\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n    # Third lockdown 6 January 2021\n    geom_segment(aes(x = as.Date(\"2021-01-06\"), y = 500000, yend = 1100000,\n                     xend = as.Date(\"2021-01-06\"), colour = \"segment\"),\n                     linewidth=1.5,color=\"orange\") +\n    # Text annotations for each lockdown\n\n    annotate('text',x = as.Date(\"2019-07-20\"),y = 1200000,label = \"First lockdown\") +\n    annotate('text',x = as.Date(\"2019-05-26\"),y = 1164000,label = \"01/08/2020\") +\n    annotate('text',x = as.Date(\"2022-10-20\"),y = 1100000,label = \"Second lockdown\") +\n    annotate('text',x = as.Date(\"2023-04-20\"),y = 1070000,label = \"05/11/2020\") +\n    annotate('text',x = as.Date(\"2022-10-20\"),y = 980000,label = \"Third lockdown\") +\n    annotate('text',x = as.Date(\"2023-04-20\"),y = 950000,label = \"06/01/2021\") +\n  # Adding arrows to lockdowns labels \n  # First lockdown arrow \n   annotate('curve',x = as.Date(\"2019-06-01\"),xend = as.Date(\"2020-02-20\"),\n            y = 1140000,yend = 1090000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +\n  # Second lockdown arrow\n     annotate('curve',x = as.Date(\"2022-01-01\"),xend = as.Date(\"2020-11-01\"),y = 1080000,yend = 970000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) +\n  # Third lockdown arrow\n   annotate('curve',x = as.Date(\"2022-01-01\"),xend = as.Date(\"2021-02-01\"),y = 990000,yend = 910000,\n    linewidth = 1,curvature = 0.6,arrow = arrow(length = unit(0.2,'cm'))) \nCurved_line_annotation\n\n\n\n\n\n\n7.1 List of lockdown relevant dates:\nFirst national lockdown (March to June 2020)\nEngland was in national lockdown between late March and June 2020. Lockdown measures legally came into force for the first time on 26 March 2020.\nFirst nationwide lockdown was legally effective from 1:00pm on 26th March 2020.\nInitially, all “non-essential” high street businesses were closed and people were ordered to stay at home, permitted to leave for essential purposes only, such as buying food or for medical reasons. Starting in May 2020, the laws were slowly relaxed. People were permitted to leave home for outdoor recreation (beyond exercise) from 13 May. On 1 June, the restriction on leaving home was replaced with a requirement to be home overnight, and people were permitted to meet outside in groups of up to six people.\nSecond national lockdown (November 2020)\nOn 5 November 2020, national restrictions were reintroduced in England. During the second national lockdown, non-essential high street businesses were closed, and people were prohibited from meeting those not in their “support bubble” inside. People could leave home to meet one person from outside their support bubble outdoors.\nThird national lockdown (January to March 2021)\nFollowing concerns that the four-tier system was not containing the spread of the Alpha variant, national restrictions were reintroduced for a third time on 6 January 2021.\nThe rules during the third lockdown were more like those in the first lockdown. People were once again told to stay at home. However, people could still form support bubbles (if eligible) and some gatherings were exempted from the gatherings ban (for example, religious services and some small weddings were permitted).\nReference for National lockdown dates: https://commonslibrary.parliament.uk/research-briefings/cbp-9068/"
  },
  {
    "objectID": "distributions.html#distributions",
    "href": "distributions.html#distributions",
    "title": "Fitting distributions",
    "section": "Distributions",
    "text": "Distributions\nThis is a small introduction to distributions and how to fit them to ggplot2 charts.\n\nIn statistics a distribution is a function that shows the possible values for a variable and how often they occur. It is also a probability distribution.\nWe will use a real example with A&E Data Downloaded from NHS Digital website, and we will apply a Normal distribution to Type I Attendances metric.\nThe reference and example used to create these distribution charts can be found on this website: https://data-se.netlify.app/2021/06/23/overlaying-facetted-histograms-with-normal-curve-using-ggplot2/"
  },
  {
    "objectID": "distributions.html#load-required-packages",
    "href": "distributions.html#load-required-packages",
    "title": "Fitting distributions",
    "section": "Load required packages",
    "text": "Load required packages\nWe start by loading required packages for our analysis. We include echo=TRUE and message=TRUE to display output from rendered r code chuncks.\n\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,\n                      dpi = 180, fig.width = 8, fig.height = 5)\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.4     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(readxl)\nlibrary(here)\n\nhere() starts at C:/R/WorkingDir/Pablo-source.github.io\n\n\n\n\n\nhttps://github.com/Pablo-source"
  }
]