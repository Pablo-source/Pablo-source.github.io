[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pablo-source.github.io",
    "section": "",
    "text": "This is my personal website. I will publish Quarto documents about Data Analysis, statistics, predictive modelling and maps created in R and Python.\nThis is a Quarto website hosted on GitHub pages\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The first section I have included is called City_maps, where I explore how to build several city maps in R using OpenStreetMap (OSM) information with osmdata package. These maps are built by adding layers of geographical information onto them."
  },
  {
    "objectID": "City_maps.html",
    "href": "City_maps.html",
    "title": "City_maps",
    "section": "",
    "text": "In this section, I will describe how to build maps for several cities around the world, using global open access mapping data from “osmdata” pacakge in R.\nhttps://docs.ropensci.org/osmdata/articles/osmdata.html.\nFrom the package website, they explain how working with open access map data, ensures transparent data provenance and ownership, allowing anyone to contribute, encouraging democratic decision making and citizen science. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017)"
  },
  {
    "objectID": "City_maps.html#working-with-vector-data",
    "href": "City_maps.html#working-with-vector-data",
    "title": "City_maps",
    "section": "Working with vector data",
    "text": "Working with vector data\nOpenStreetMap (OSM) project information can be accessed via overpass queries using osmdata package in R. This package obtains OSM data from the overpass API, which is a read-only API that serves up custom selected parts of the the OSM map data."
  },
  {
    "objectID": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "href": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "title": "City_maps",
    "section": "Install and load OSMDATA package from CRAN",
    "text": "Install and load OSMDATA package from CRAN\nTo start working with Open OpenStreetMap package, install it from CRAN\n\n\nCode\n# install.packages(\"osmdata\",dependencies = TRUE)\n\n\nAnd then load it the usual way\n\n\n\nFrom osmdata package we will use these functions to plot our map:\n\ngetbb(): Get bounding box for a given place name\navailable_features(): List recognized features in OpenStreetMap(OSM)\navailable_features(): List recognized features in OSM. This function returns a character vector of all known features\navailable_tags(): List tags associated with a feature\n\nOnce we know which features and tags we want to include in our map, we can start building the query to the API to retrieve these features\n\nopq(): Build an Overpass query\nadd_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot “highway” feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as ““motorway”,“primary”,“secondary”,“tertiary”,“residential”,“living_street”,“unclassified” as we can see in the Valencia city map example.\nosmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.\n\nThe combination of the above three functions provides us with an object that ggplot() package can take in to create a map using the geom_sf() function.\nIn a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.\nFor a further explantion about sf objects, please refer to Jesse Sadler website: [sf objects]https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.\nLoad also extra libraries for data wrangling and to create plots\n\n\nCode\npacman::p_load(here,tidyverse,osmdata,sf,showtext)\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "href": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "title": "City_maps",
    "section": "Visualize Valencia city map using OpenStreetMap tutorial",
    "text": "Visualize Valencia city map using OpenStreetMap tutorial\nWhen building maps using OpenStreetMap, we can think about them in similar terms as ggplot2 plots, in the sense we build them step by step, adding one layer at a time to display the required information on top of the initial map of the region we want to create a map from.\nHaving selected the city we want to plot, then we use getbb() function to obtain a bounding box for a given place name. In this instance I will plot the city of Valencia in Spain.\ngetbb() provides latitude and longitude coordinates associated with Valencia city in Spain\n\n\nCode\ngetbb(\"Valencia Spain\")\n\n\n         min        max\nx -0.4325512 -0.2725205\ny 39.2784496 39.5666089"
  },
  {
    "objectID": "City_maps.html#select-your-reagion-and-add-one-feature",
    "href": "City_maps.html#select-your-reagion-and-add-one-feature",
    "title": "City_maps",
    "section": "1. Select your reagion and add one feature",
    "text": "1. Select your reagion and add one feature\nNow that I want to plot a map of Valencia I need to choose which features do I want to plot. Each feature is defined by a key and each key is sub-divided into further values.\nFor example, if I want to start plotting roads or highways into my map, I need to first identify how roads are defined in osmdata package. For that we use available_features() function to choose different roads or transportation routes defined in the map\n\n\nCode\n# Not run as there are more than 250 elements\n# available_features()\n\n\nFrom the above list of features I can see “highway” as available key, so now I need to know which specific values are linked to that key. For tha I will use available_tags() function, to find out which values are related to the key “highway”\n\n\nCode\navailable_tags(\"highway\")\n\n\n [1] \"bridleway\"              \"bus_guideway\"           \"bus_stop\"              \n [4] \"busway\"                 \"construction\"           \"corridor\"              \n [7] \"crossing\"               \"cycleway\"               \"elevator\"              \n[10] \"emergency_access_point\" \"emergency_bay\"          \"escape\"                \n[13] \"footway\"                \"give_way\"               \"living_street\"         \n[16] \"milestone\"              \"mini_roundabout\"        \"motorway\"              \n[19] \"motorway_junction\"      \"motorway_link\"          \"passing_place\"         \n[22] \"path\"                   \"pedestrian\"             \"platform\"              \n[25] \"primary\"                \"primary_link\"           \"proposed\"              \n[28] \"raceway\"                \"residential\"            \"rest_area\"             \n[31] \"road\"                   \"secondary\"              \"secondary_link\"        \n[34] \"service\"                \"services\"               \"speed_camera\"          \n[37] \"steps\"                  \"stop\"                   \"street_lamp\"           \n[40] \"tertiary\"               \"tertiary_link\"          \"toll_gantry\"           \n[43] \"track\"                  \"traffic_mirror\"         \"traffic_signals\"       \n[46] \"trailhead\"              \"trunk\"                  \"trunk_link\"            \n[49] \"turning_circle\"         \"turning_loop\"           \"unclassified\"          \n[52] \"via_ferrata\"           \n\n\nAs I want to start by plotting the main roads in the city of Valencia, i will choose a handful of the above tags: motorway, primary, secondary, tertiary,residential,living_street, unclassified."
  },
  {
    "objectID": "City_maps.html#choosing-elements-for-map-first-layer",
    "href": "City_maps.html#choosing-elements-for-map-first-layer",
    "title": "City_maps",
    "section": "2. Choosing elements for map first layer",
    "text": "2. Choosing elements for map first layer\nWe name each layer with the key and values we want to plot in the map. So for this first example, I want to see several types of roads in the region of Valencia\n\n\nCode\n# MAP LAYER 01: roads  \nroads <- getbb(\"Valencia Spain\") %>% \n         opq(timeout =  3500) %>% \n         add_osm_feature(key = \"highway\",\n                        value = c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\n                                  \"residential\",\"living_street\",\"unclassified\")) %>% \n         osmdata_sf()\nroads"
  },
  {
    "objectID": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "href": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "title": "City_maps",
    "section": "3. Building maps in layers by adding natural and urban features",
    "text": "3. Building maps in layers by adding natural and urban features\n\n3.1 Initial Valencia city map showing roads and highways\nUsing ggplot2, we use the sf cartographic object we queried from the OpenMap API, mapping several sf objects via ggplot2 and geom_sf() functions.\nAlso, It is in this step where we make use of getbb(“Valencia Spain”) function, to ensure the features we match the specific latitude and longitude of the city we want to plot.\nWe have created so far just one geom_sf() object, we include it within the ggplot() function alongside the lat and long coordinated of Valencia.\nPrior to producing the final map, we define the color palette for each new feature\n\n\nCode\n# Remember to enclose Hexadecimal colors in apostrophes \nroad_color <- '#000000'\ncoastline_color <- '#000000'\n\n\nThen we can combine all previous scripts to create our first map\n\nMAP 01: Create a standard ggplot() object using geom_sf() and osm features defined as roads\n\n\n\nCode\nValencia_roads_map <- ggplot() +\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_roads_map\n\n\n\n\n\n\n\n3.2 Valencia city map including roads and coastline and also adding coastline features\nNow we add a new layer to the previous map, including natural water features such as bays beaches, dunes and coastline.\n\n\nCode\navailable_tags(\"natural\")\n\n\n [1] \"arch\"          \"arete\"         \"bare_rock\"     \"bay\"          \n [5] \"beach\"         \"blowhole\"      \"cape\"          \"cave_entrance\"\n [9] \"cliff\"         \"coastline\"     \"crevasse\"      \"dune\"         \n[13] \"earth_bank\"    \"fell\"          \"fumarole\"      \"geyser\"       \n[17] \"glacier\"       \"grassland\"     \"heath\"         \"hill\"         \n[21] \"hot_spring\"    \"isthmus\"       \"moor\"          \"mud\"          \n[25] \"peak\"          \"peninsula\"     \"reef\"          \"ridge\"        \n[29] \"rock\"          \"saddle\"        \"sand\"          \"scree\"        \n[33] \"scrub\"         \"shingle\"       \"shoal\"         \"shrubbery\"    \n[37] \"sinkhole\"      \"spring\"        \"stone\"         \"strait\"       \n[41] \"tree\"          \"tree_row\"      \"tundra\"        \"valley\"       \n[45] \"volcano\"       \"water\"         \"wetland\"       \"wood\"         \n\n\nAmong all possible natural tags, we choose those related to coastline and seafront features such as beaches and bays\n\n\nCode\nVlc_coastline <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"natural\",\n                  value = c(\"bay\",\"water\",\"beach\",\"wetland\",\"dune\",\"coastline\")) %>% \n  osmdata_sf()\nVlc_coastline\n\n\n\nIn order to display the Valencian bay opposite the city seafront we have to define it as a multipolygon object\n\n\n\nCode\nVlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons\n\n\n\nRoads features are defined as lines whilst coastline and water features are defined as polygons\nMAP 02: This is a new map combining roads and coastline layers\nSet colour palette for road and coastline features\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\n\n\n\n\nCode\n# This is the ggplot2() MAP02\nValencia_coastline_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_coastline_map\n\n\n\n\n\n\n\n3.3 New Water bodies features added to Valencia city map\n\nWe want to include the sea and different water bodies such as reservoirs and natural lagoons in the map. South of Valencia city there is fresh water lagoon called “La Albufera” we want to display it in hues of blue colors.\n\n\n\nCode\nVlc_water <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"water\") %>% \n  osmdata_sf()\n\nVlc_sea <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"waterway\",\n                  value = \"river\") %>% \n  osmdata_sf()\n\n\n\nTo display these water features in the map, we define them as multipolygon objects\n\n\n\nCode\nVlc_water_multipolygons <- Vlc_water$osm_multipolygons\nVlc_sea_multipolygons <- Vlc_sea$osm_multipolygons\n\n\n\nMAP 03: Map including these new water features (we build them on the previous road and highways features included on previous steps)\n\n\n\nCode\n# Set colour palette for water features \nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\n\n\nCode\n# This is the ggplot2() MAP03\n\nValencia_waterways_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  \n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,\n          inherit.aes = FALSE,\n          color = water_color\n  ) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,\n          inherit.aes = FALSE,\n          color = waterway_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_waterways_map"
  },
  {
    "objectID": "City_maps.html#valencia-open-street-map-including-all-previous-features",
    "href": "City_maps.html#valencia-open-street-map-including-all-previous-features",
    "title": "City_maps",
    "section": "4. VALENCIA OPEN STREET MAP (including all previous features)",
    "text": "4. VALENCIA OPEN STREET MAP (including all previous features)\n\n4.1 Combining all features into a single map and applying specific Theme\nNow that we have defined several features to be plotted in our map (roads,coastline,waterways and rivers), we can combine them all into an output map. Again we add each of these feature using the geom_sf() function.\nThis final step also includes making the map prettier by applying several theme options and adding a background colour to the map as well as Title and Subtitle: - Include Map title and subtitle - Setup background colour - Set map margins\n\nSet colour palette for VALENCIA OPEN STREET MAP\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\nalbufera_lagoon <- \"#0ACDFF\"\nfont_color <-'#D2691E' \nbackground_color <- \"#D4B483\"\n\n\nIn this map below, we combine all previous features into one final map\n\nMAP 04: VALENCIA OPEN STREET MAP, ALL PREVIOUS FEATURES INCLUDED\n\n\n\nCode\nValencia_city_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +\n  # coastline\n  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE) +\n  # Include Map title and subtitle \n  labs(title = \"Valencia ~ l'Albufera\", subtitle = '39.4699° N, 0.3763° W') +\n  # Apply specific theme to map title and sub-title\n  theme_void() +\n  theme(\n    plot.title = element_text(family = \"Barlow\",color = font_color,size = 9, \n                              hjust = 0, vjust = 1),\n    plot.title.position = \"plot\",\n    plot.subtitle = element_text(family = \"Barlow\",\n                                 color = font_color,\n                                 size = 5,\n                                 hjust = 0 , vjust = 2.3),  \n    # Setup background color for entire map \n    panel.border = element_rect(colour = background_color, fill = NA, size = 1),\n    panel.margin = unit(c(0.6,1.6,1,1.6),\"cm\"),\n    plot.background = element_rect(fill = background_color)\n  ) \n\nValencia_city_map \n\n\n\n\n\nFinally we save output map as a .png file to print it out. The default image width and height values can be changed to match a standard frame to hang it on the wall as a city map poster.\n\n\nCode\nname <- \"Valencia_open_street_map\"\nwidth = 20\nheight = 40\n\n\nThe last step is to use ggsave() function to create an output .png file that to be exported and printed.\n\n\nCode\nggsave(here::here(paste(name,\".png\", sep =\"_\")),\n       device = \"png\", width = width, height = height, units = \"cm\", dpi = \"retina\", bg = \"transparent\")\n\n\nIn coming weeks new city maps will be added to this section for the city of The Hague, Netherlands and Birmingham, UK."
  },
  {
    "objectID": "City_maps.html#annex",
    "href": "City_maps.html#annex",
    "title": "City_maps",
    "section": "5. Annex",
    "text": "5. Annex\n\nValencia city map output image as .png file https://github.com/Pablo-source/Maps-in-R/blob/main/City_maps/Valencia_open_street_map_.png\nValencia city map R script https://github.com/Pablo-source/Maps-in-R/blob/main/City_maps/Valencia_open_street_map.R\nSimilar quarto document to the one used to build this website https://github.com/Pablo-source/Maps-in-R/blob/main/Documentation/Quarto_markdown%20custom%20setup.qmd"
  },
  {
    "objectID": "City_maps.html#installing-and-loading-osmdata-package-from-cran",
    "href": "City_maps.html#installing-and-loading-osmdata-package-from-cran",
    "title": "City_maps",
    "section": "Installing and loading OSMDATA package from CRAN",
    "text": "Installing and loading OSMDATA package from CRAN\nTo start working with Open OpenStreetMap package, I first install it from CRAN\n\n\nCode\n# install.packages(\"osmdata\",dependencies = TRUE)\n\n\nAnd then load it the usual way using pacman::p_load() function to load several libraries at once, pacman::p_load(here,tidyverse,osmdata,sf,showtext). This is a more efficient way of working with several R libraries.\n\n\n\nThese are the specific From osmdata package we will use these functions to plot our map:\n\ngetbb(): Get bounding box for a given place name\navailable_features(): List recognized features in OpenStreetMap(OSM)\navailable_features(): List recognized features in OSM. This function returns a character vector of all known features\navailable_tags(): List tags associated with a feature\n\nOnce I know which features to include in the map (buildings,roads,rivers,lagoons and bays), then I select the relevant tags that constitute the query we pass to the API to plot them using ggplot2. These are the set of osmdata functions used in this section:\n\nopq(): Build an Overpass query\nadd_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot “highway” feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as ““motorway”,“primary”,“secondary”,“tertiary”,“residential”,“living_street”,“unclassified” as we can see in the Valencia city map example.\nosmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.\n\nThese three functions combined provides me with a gggplot2() object I can turn into a map using geom_sf() to handle shape files and polygons.\nIn a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.\nFor a further explanation about sf objects, please refer to Jesse Sadler website: [sf objects]https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.\nThen I load some extra libraries for data wrangling and to create plots\n\n\nCode\npacman::p_load(here,tidyverse,osmdata,sf,showtext)\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "City_maps.html#add-first-feature-to-the-openstreet-map",
    "href": "City_maps.html#add-first-feature-to-the-openstreet-map",
    "title": "City_maps",
    "section": "1. Add first feature to the OpenStreet map",
    "text": "1. Add first feature to the OpenStreet map\nWhen creating a map of Valencia, it’s important to decide which features to include. In OpenStreetMap, each feature is identified by a key, which is then further subdivided into values.\nTo plot roads or highways on the map, we first need to identify how these features are defined in the osmdata package. We can do this by using the available_features() function to select different types of roads or transportation routes defined in the map.\nOnce we have chosen the desired features, we can add them to our map along with other layers to create a comprehensive and informative representation of Valencia.\n\n\nCode\n# Not run as there are more than 250 elements\n# available_features()\n\n\nLooking at the list of available features, I can see that “highway” is one of the keys that I can use to plot transportation routes on my map of Valencia. However, I need to determine which specific values are associated with this key.\nTo do this, I can use the available_tags() function to identify the values that are related to the “highway” key. By selecting the appropriate values for the key, I can customize the map to display the types of transportation routes that are most relevant to my needs.”\n\n\nCode\navailable_tags(\"highway\")\n\n\n [1] \"bridleway\"              \"bus_guideway\"           \"bus_stop\"              \n [4] \"busway\"                 \"construction\"           \"corridor\"              \n [7] \"crossing\"               \"cycleway\"               \"elevator\"              \n[10] \"emergency_access_point\" \"emergency_bay\"          \"escape\"                \n[13] \"footway\"                \"give_way\"               \"living_street\"         \n[16] \"milestone\"              \"mini_roundabout\"        \"motorway\"              \n[19] \"motorway_junction\"      \"motorway_link\"          \"passing_place\"         \n[22] \"path\"                   \"pedestrian\"             \"platform\"              \n[25] \"primary\"                \"primary_link\"           \"proposed\"              \n[28] \"raceway\"                \"residential\"            \"rest_area\"             \n[31] \"road\"                   \"secondary\"              \"secondary_link\"        \n[34] \"service\"                \"services\"               \"speed_camera\"          \n[37] \"steps\"                  \"stop\"                   \"street_lamp\"           \n[40] \"tertiary\"               \"tertiary_link\"          \"toll_gantry\"           \n[43] \"track\"                  \"traffic_mirror\"         \"traffic_signals\"       \n[46] \"trailhead\"              \"trunk\"                  \"trunk_link\"            \n[49] \"turning_circle\"         \"turning_loop\"           \"unclassified\"          \n[52] \"via_ferrata\"           \n\n\nI plan to begin by mapping the primary roads in Valencia. To do this, I will select a few key tags from the list, such as motorway, primary, secondary, tertiary,residential,living_street, unclassified."
  },
  {
    "objectID": "City_maps.html#choose-elements-to-be-included-on-the-first-layer-of-the-map",
    "href": "City_maps.html#choose-elements-to-be-included-on-the-first-layer-of-the-map",
    "title": "City_maps",
    "section": "2. Choose elements to be included on the first layer of the map",
    "text": "2. Choose elements to be included on the first layer of the map\nRoads and highways are the first set of elements to be included on my map of Valencia. Displaying transportation routes in the city but also through its metropolitan area. From the previous available_tags() function, I choose “highway” as the appropriate value for this key.\nThis allows me to display different types of transportation types such as motorways, primary, secondary, and tertiary roads as well as motorways on the map.\n\n\nCode\n# MAP LAYER 01: roads  \nroads <- getbb(\"Valencia Spain\") %>% \n         opq(timeout =  3500) %>% \n         add_osm_feature(key = \"highway\",\n                        value = c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\n                                  \"residential\",\"living_street\",\"unclassified\")) %>% \n         osmdata_sf()\nroads"
  },
  {
    "objectID": "City_maps.html#adding-natural-and-urban-features-to-the-map",
    "href": "City_maps.html#adding-natural-and-urban-features-to-the-map",
    "title": "City_maps",
    "section": "3. Adding natural and urban features to the map",
    "text": "3. Adding natural and urban features to the map\n\n3.1 Initial Valencia city map showing roads and highways\nIn r, I use the sf cartographic object I obtained from our OpenMap API query, mapping several sf objects via ggplot2 and geom_sf() functions.\nAlso, using getbb(“Valencia Spain”) function, I ensure the features we display on the map macth the city latitude and longitude I want to plot.\nSo far I have created just one geom_sf() object, embedded insite the ggplot() function, alongside the lat and long values for the city of Valencia.\nPrior to producing the final map, I define the colour palette for each new feature,\n\n\nCode\n# Remember to enclose Hexadecimal colors in apostrophes \nroad_color <- '#000000'\ncoastline_color <- '#000000'\n\n\nThen I can combine all previous scripts to create the first output map:\n\nMAP 01: Create a standard ggplot() object using geom_sf() and osm features defined as roads\n\n\n\nCode\nValencia_roads_map <- ggplot() +\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_roads_map\n\n\n\n\n\n\n\n3.2 Valencia city displaying roads and streets plus coastline features\nNow I have added a new layer to the previous map, including beaches, dunes, bays and coastline natural water features.\n\n\nCode\navailable_tags(\"natural\")\n\n\n [1] \"arch\"          \"arete\"         \"bare_rock\"     \"bay\"          \n [5] \"beach\"         \"blowhole\"      \"cape\"          \"cave_entrance\"\n [9] \"cliff\"         \"coastline\"     \"crevasse\"      \"dune\"         \n[13] \"earth_bank\"    \"fell\"          \"fumarole\"      \"geyser\"       \n[17] \"glacier\"       \"grassland\"     \"heath\"         \"hill\"         \n[21] \"hot_spring\"    \"isthmus\"       \"moor\"          \"mud\"          \n[25] \"peak\"          \"peninsula\"     \"reef\"          \"ridge\"        \n[29] \"rock\"          \"saddle\"        \"sand\"          \"scree\"        \n[33] \"scrub\"         \"shingle\"       \"shoal\"         \"shrubbery\"    \n[37] \"sinkhole\"      \"spring\"        \"stone\"         \"strait\"       \n[41] \"tree\"          \"tree_row\"      \"tundra\"        \"valley\"       \n[45] \"volcano\"       \"water\"         \"wetland\"       \"wood\"         \n\n\nThese are the set of elements I will include in the map enclosed in the concatenate c() function below: “bay”,“water”,“beach”,“wetland”,“dune”, “coastline” all these are coastline and water related map features.\n\n\nCode\nVlc_coastline <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"natural\",\n                  value = c(\"bay\",\"water\",\"beach\",\"wetland\",\"dune\",\"coastline\")) %>% \n  osmdata_sf()\nVlc_coastline\n\n\n\nTo display the Valencian Bay in blue colour next to the city seafront I define it as a multipolygon object\n\n\n\nCode\nVlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons\n\n\n\nRoads features are defined as lines whilst coastline and water features are defined as multipolygons\nMAP 02: Map combining roads and coastline layers\nSet colour palette for road and coastline features\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\n\n\n\n\nCode\n# This is the ggplot2() MAP02\nValencia_coastline_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_coastline_map\n\n\n\n\n\n\n\n3.3 New Water bodies features added to Valencia city map\n\nI want to include reservoirs and natural lagoons in the map. South of Valencia city there is freshwater lagoon called “La Albufera” I will include them in the map using shades of blue colour.\n\n\n\nCode\nVlc_water <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"water\") %>% \n  osmdata_sf()\n\nVlc_sea <- getbb(\"Valencia Spain\") %>% \n  opq(timeout =  3500) %>% \n  add_osm_feature(key = \"waterway\",\n                  value = \"river\") %>% \n  osmdata_sf()\n\n\n\nTo display these water features in the map, I define them as multipolygon objects\n\n\n\nCode\nVlc_water_multipolygons <- Vlc_water$osm_multipolygons\nVlc_sea_multipolygons <- Vlc_sea$osm_multipolygons\n\n\n\nMAP 03: Map including these new water bodies on top of previous road and highways features\n\n\n\nCode\n# Set colour palette for water features \nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\n\n\nCode\n# This is the ggplot2() MAP03\n\nValencia_waterways_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,\n          inherit.aes = FALSE,\n          color = road_color\n  ) +\n  # coastline as multipolygons\n  geom_sf(data = Vlc_coastline_multipolygons,\n          inherit.aes = FALSE,\n          color = coastline_color\n  ) +\n  \n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,\n          inherit.aes = FALSE,\n          color = water_color\n  ) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,\n          inherit.aes = FALSE,\n          color = waterway_color\n  ) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),\n           ylim = c(39.2784496, 39.5666089),\n           expand = FALSE)\nValencia_waterways_map"
  },
  {
    "objectID": "City_maps.html#valencia-open-street-map",
    "href": "City_maps.html#valencia-open-street-map",
    "title": "City_maps",
    "section": "4. VALENCIA OPEN STREET MAP",
    "text": "4. VALENCIA OPEN STREET MAP\n\n4.1 Combining all features into a final output map\nAfter defining several features to be plotted in the map (roads,coastline,waterways and rivers), I combine them as ggplot2 plot layers. To finally create one single ggplot2 image output as a .png file.\nThis final step also includes enhancing the map appearance by applying several theme options, adding background colour and Title and Subtitle to the output map.\n\nSet colour palette for VALENCIA OPEN STREET MAP\n\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\nalbufera_lagoon <- \"#0ACDFF\"\nfont_color <-'#D2691E' \nbackground_color <- \"#D4B483\"\n\n\nThemed and formatted final output map of Valencia city\n\nMAP 04: Valencia city map\n\n\n\nCode\nValencia_city_map <- ggplot() +\n  # roads\n  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +\n  # coastline\n  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # water colour as multipolygons\n  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +\n  # waterway colour as multipolygons\n  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE) +\n  # Include Map title and subtitle \n  labs(title = \"Valencia ~ l'Albufera\", subtitle = '39.4699° N, 0.3763° W') +\n  # Apply specific theme to map title and sub-title\n  theme_void() +\n  theme(\n    plot.title = element_text(family = \"Barlow\",color = font_color,size = 9, \n                              hjust = 0, vjust = 1),\n    plot.title.position = \"plot\",\n    plot.subtitle = element_text(family = \"Barlow\",\n                                 color = font_color,\n                                 size = 5,\n                                 hjust = 0 , vjust = 2.3),  \n    # Setup background color for entire map \n    panel.border = element_rect(colour = background_color, fill = NA, size = 1),\n    panel.margin = unit(c(0.6,1.6,1,1.6),\"cm\"),\n    plot.background = element_rect(fill = background_color)\n  ) \n\nValencia_city_map \n\n\n\n\n\nThe default image width and height values can be changed to match a standard frame to hang it on the wall as a city map poster.\n\n\nCode\nname <- \"Valencia_open_street_map\"\nwidth = 20\nheight = 40\n\n\nThe last step is to use ggsave() function to create an output .png file that to be exported and printed.\n\n\nCode\nggsave(here::here(paste(name,\".png\", sep =\"_\")),\n       device = \"png\", width = width, height = height, units = \"cm\", dpi = \"retina\", bg = \"transparent\")\n\n\nIn coming weeks new city maps of The Hague, Netherlands and Birmingham, UK will be added to this section."
  },
  {
    "objectID": "Resources.html",
    "href": "Resources.html",
    "title": "Resources",
    "section": "",
    "text": "R and R Eco-system resources\nR tips\nPython tips\nNHS R and Python communities of practice\nR and Python online books"
  },
  {
    "objectID": "Resources.html#posit",
    "href": "Resources.html#posit",
    "title": "Resources",
    "section": "POSIT",
    "text": "POSIT\nPosit is the Company who developed RStudio IDE among other products, previously called RStudio. All your data products have a home on Posit Connect, Deploy R & Python content easily and securely, automate code execution and deliver insights to stakeholders that need them\n\nPosit website: https://posit.co/\n\n\nPOSIT learning resources\nLearning materials from POSIT about R, Python and Quarto\n\nBlogs: https://posit.co/blog/\nCheat sheets: https://posit.co/resources/cheatsheets/\nVideos: https://posit.co/resources/videos/"
  },
  {
    "objectID": "Resources.html#quarto",
    "href": "Resources.html#quarto",
    "title": "Resources",
    "section": "QUARTO",
    "text": "QUARTO\nAn Open-source scientific and technical publishing system, available for R, Python and Julia.\n\nQuarto website: https://quarto.org\n\nGet started with Quarto\n\nInstall Quarto: https://quarto.org/docs/get-started/\n\nAuthoring Quarto documents\nQuarto tutorial – Authoring: https://quarto.org/docs/get-started/authoring/rstudio.html\n\nInclude formatted title blocks at the start of the article: https://quarto.org/docs/authoring/title-blocks.html\nQuarto themes: Lumen: https://bootswatch.com/lumen/ Journal: https://bootswatch.com/journal/ Cosmo: https://bootswatch.com/cosmo/ Sandstone: https://bootswatch.com/sandstone/ Spacelab: https://bootswatch.com/spacelab/ Slate:https://bootswatch.com/slate/\nUpdate Quarto documents header date date automatically: https://bookdown.org/yihui/rmarkdown-cookbook/update-date.html\n\n\nCreating websites using Quarto\n\nA couple of resources on how to build a Quarto website:\nCreating it: Creating a Quarto website - YouTube: https://www.youtube.com/watch?v=_bglTCjgcqY\nPublishing it to GitHub: Publishing a Quarto website through GitHub pages - YouTube: https://www.youtube.com/watch?v=uimdXPZc40I\nChanging a Quarto website’s output directory: https://www.youtube.com/watch?v=ZkcY9YQ3iLY"
  },
  {
    "objectID": "Resources.html#rstudio",
    "href": "Resources.html#rstudio",
    "title": "Resources",
    "section": "RStudio",
    "text": "RStudio\nRStudio IDE to run R, developed by RStudio now POSIT\n\nRStudio IDE: https://posit.co/products/open-source/rstudio/"
  },
  {
    "objectID": "Resources.html#python",
    "href": "Resources.html#python",
    "title": "Resources",
    "section": "Python",
    "text": "Python\nPython main website\n\nPython: https://www.python.org/\n\nPython coding topics and data structures\n\nDictionaries: https://python.land/things-you-didnt-know-about-python-dictionaries"
  },
  {
    "objectID": "Resources.html#nhs-r-and-python-communities-of-practise",
    "href": "Resources.html#nhs-r-and-python-communities-of-practise",
    "title": "Resources",
    "section": "NHS R and Python communities of practise",
    "text": "NHS R and Python communities of practise"
  },
  {
    "objectID": "Resources.html#nhs-r-community",
    "href": "Resources.html#nhs-r-community",
    "title": "Resources",
    "section": "NHS-R Community",
    "text": "NHS-R Community\nTogether we aim to promote the use of R in the NHS: https://nhsrcommunity.com/ Wider NHS-R community pages and resources, includes links to a number of recorded sessions and training, all based on NHS datasets\n\nNHS-R Events\n\nConferences\n\n\nUpcoming conferences: https://nhsrcommunity.com/events/#event_type-conferences\nShow Past Events: https://nhsrcommunity.com/past-events/\nNHS-R Community Conference 2022: https://nhsrcommunity.com/events/nhs-r-community-conference-2022/\n\n\nGroup Discussions\n\n\nGroup Discussions: https://nhsrcommunity.com/events/#event_type-group-discussion\n\n\nGroup Discussions/workshops\n\n\nWebinars: https://nhsrcommunity.com/events/#event_type-group-discussionworkshops\n\n\nWebinars\n\n\nWebinars: https://nhsrcommunity.com/events/#event_type-webinars\n\n\nWorkshops\n\n\nWorkshops: https://nhsrcommunity.com/events/#event_type-workshops\n\n4.1 Upcoming workshops - NHS-R Workshop: Introduction to R and RStudio – 11th May 2023: https://nhsrcommunity.com/events/nhs-r-workshop-introduction-to-r-and-r-studio-11th-may-2023/\n\nNHS-R Workshop: Forecasting Using R – Advanced Methods – May 2023: https://nhsrcommunity.com/events/nhs-r-workshop-forecasting-using-r-advanced-methods-may-2023/"
  },
  {
    "objectID": "Resources.html#nhse-r",
    "href": "Resources.html#nhse-r",
    "title": "Resources",
    "section": "NHSE-R",
    "text": "NHSE-R\nWelcome to the NHS England R community documentation site The NHS England R Community is not intended to replace any other R user groups - there’s a fantastic national NHS-R Community and lots of local sharing of R work, we want to use this site to signpost to other resources for those specifically using R within NHS England.\n\nNHSE-R: https://nhsengland.github.io/nhs-r-reporting\nNHS England R Community Future NHS: https://future.nhs.uk/NHSERcommunity\nReproducible Analytical Pipelines (RAP): https://nhsengland.github.io/nhs-r-reporting/tutorials/rap.html"
  },
  {
    "objectID": "Resources.html#nhsd--rap-community-of-practice",
    "href": "Resources.html#nhsd--rap-community-of-practice",
    "title": "Resources",
    "section": "NHSD- RAP Community of Practice",
    "text": "NHSD- RAP Community of Practice\nRAP Community of practice: https://nhsdigital.github.io/rap-community-of-practice/\n\nBasic Python data analysis operations: https://nhsdigital.github.io/rap-community-of-practice/training_resources/python/basic-python-data-analysis-operations/"
  },
  {
    "objectID": "Resources.html#nhs-python",
    "href": "Resources.html#nhs-python",
    "title": "Resources",
    "section": "NHS-Python",
    "text": "NHS-Python\nPython community to promote the use of Python in the NHS.They organize forums, tutorials and coding sessions:\n\nThe Python Community for Healthcare: https://nhs-pycom.net/"
  },
  {
    "objectID": "Resources.html#code-editors",
    "href": "Resources.html#code-editors",
    "title": "Resources",
    "section": "Code editors",
    "text": "Code editors\n\nPycharm: https://www.jetbrains.com/pycharm/download/#section=windows\nRStudio: https://posit.co/download/rstudio-desktop/\nVStudio code: https://code.visualstudio.com/\nHow To Run Selected Lines In VS Code (Visual Studio Code) – YouTube: https://www.youtube.com/watch?v=VXJChVF28jw"
  },
  {
    "objectID": "Resources.html#r",
    "href": "Resources.html#r",
    "title": "Resources",
    "section": "R",
    "text": "R\nR is an open-source programming language that is widely used among statisticians and data scientists in the NHS. R has a large number of built-in functions and packages for statistical analysis and data visualisation. Along with tools such as Python1, R can be used to develop so-called reproducible analytical pipelines (RAP).\n\nThe R Project for Statistical Computing https://www.r-project.org/"
  },
  {
    "objectID": "Resources.html#python-tips",
    "href": "Resources.html#python-tips",
    "title": "Resources",
    "section": "Python tips",
    "text": "Python tips\n\nPython Beginners Guide: https://wiki.python.org/moin/BeginnersGuide/Programmers\nThe Python Tutorial: https://docs.python.org/3/tutorial/index.html\nThe 30 Best Python Libraries and Packages for Beginners: https://www.ubuntupit.com/best-python-libraries-and-packages-for-beginners/\nWhat is os.listdir() in python?: https://www.educative.io/answers/what-is-oslistdir-in-python\nGet unique values from a column in Pandas DataFrame – GeeksforGeeks: https://www.geeksforgeeks.org/get-unique-values-from-a-column-in-pandas-dataframe/\nPython String format(): https://www.programiz.com/python-programming/methods/string/format\nPython - Determine the type of an object? - Stack Overflow: https://stackoverflow.com/questions/2225038/determine-the-type-of-an-object\nGet / check the type of an object in Python: type(), isinstance(): https://note.nkmk.me/en/python-type-isinstance/\nCreate pandas dataframe from lists using zip – GeeksforGeeks: https://www.geeksforgeeks.org/create-pandas-dataframe-from-lists-using-zip/?ref=rp\nUnit Testing for Data Scientists. Using Pytest to improve the stability: https://towardsdatascience.com/unit-testing-for-data-scientists-dc5e0cd397fb\nThe Python Tutorial: https://docs.python.org/3/tutorial/index.html#tutorial-index"
  },
  {
    "objectID": "Resources.html#r-tips",
    "href": "Resources.html#r-tips",
    "title": "Resources",
    "section": "R tips",
    "text": "R tips\n\nR Colors: https://www.r-bloggers.com/2012/10/palettes-in-r/\nR colors resource: https://r-charts.com/colors/\nR colors chart: https://rstudio-pubs-static.s3.amazonaws.com/3486_79191ad32cf74955b4502b8530aad627.html\nR chart annotations: https://ggplot2-book.org/annotations.html\nR Camcoder package: https://github.com/thebioengineer/camcorder\nCamcoder package in CRAN: https://cran.r-project.org/web/packages/camcorder/index.html\nCreate design process animations: https://cran.r-project.org/web/packages/camcorder/vignettes/camcorder_record.html\nHTML widgets – useful for Shiny and Markdown reports: https://www.htmlwidgets.org/\nCrosstalk to join some widgets together: https://rstudio.github.io/crosstalk/using.html\nR Graph Gallery: https://r-graph-gallery.com/\nInteractive maps in R using Leaflet: https://rstudio.github.io/leaflet/\nInteractive maps in R using Leaflet: https://rstudio.github.io/leaflet/colors.html\nBasic intro to main axis and legend titles: http://www.sthda.com/english/wiki/ggplot2-title-main-axis-and-legend-titles\nSetting up the R environment: https://ohdsi.github.io/Hades/rSetup.html\nHow to do fuzzy matching in R: https://stylizeddata.com/how-to-do-fuzzy-matching-in-r/\nHow to Recode Factor and Character Variables in R: https://stylizeddata.com/how-to-recode-factor-and-character-variables-in-r/\nDesigning aesthetic and publication ready tables in R: https://github.com/kcuilla/fourth_down_go_rates\nHow to Recode Factor and Character Variables in R: https://stylizeddata.com/how-to-recode-factor-and-character-variables-in-r/\nDriving a web browser with RSelenium: https://www.computerworld.com/article/2971265/how-to-drive-a-web-browser-with-r-and-rselenium.html\n\nDbplyr library\n\nDatabase manipulation using DPLYR principles: https://dbplyr.tidyverse.org/articles/sql-translation.html\n\nTufte design principles\n\nTufte main website: https://www.edwardtufte.com/tufte/\nUniversity of Toronto. Design Principles: https://mdl.library.utoronto.ca/dataviz/design-principles\nThedoublethink. Tufte’s Principles: https://thedoublethink.com/tuftes-principles-for-visualizing-quantitative-information/\nDataSciLibArts. Principles of data visualization: https://kevinlanning.github.io/DataSciLibArts/principles-of-data-visualization.html\n\nRViews\n\nRviews from RStudio: https://rviews.rstudio.com/\nTop 40 new cran packages (Feb2023): https://rviews.rstudio.com/2023/03/28/february-2023-top-40-new-cran-packages/\n\n\nNHSE-R drop in session 26/05/2023 - presentation - Using themes in ggplot2\nOnline Resources\n\nGgplot2 plots gallery from my GitHub: https://github.com/Pablo-source/ggplot2-visualizations\nCara Thompson.Variations on a ggtheme: https://carathompson.com/talks/nhsr2022-ggplot-themes\nThe R Graph Gallery: https://r-graph-gallery.com/\nNHS England R Community: https://nhsengland.github.io/nhs-r-reporting/\nNHS Colour Guidelines: https://nhsengland.github.io/nhs-r-reporting/tutorials/nhs-colours.html\n\n\n\nNHSE-R drop in session - presentation - Maps in R using ggplot2 and OSM\nOnline Resources\n\nAn introduction to plotting maps in R using ggplot2 An introduction to plotting maps in R using ggplot2 can be found on this online book: https://ggplot2-book.org/maps.html\nOpenStreetMap (OSM) Package details: https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html\nOpenStreepMap. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017: https://www.openstreetmap.org/#map=6/54.910/-3.432\nFrom my GitHub repo: Maps gallery in R: https://github.com/Pablo-source/Maps-in-R\nOSM City maps examples: https://github.com/Pablo-source/Maps-in-R/tree/main/City_maps\nCCG Outcomes Indicato Set - March 2022: https://digital.nhs.uk/data-and-information/publications/statistical/ccg-outcomes-indicator-set/march-2022\nWebsite with projection resources: https://cran.r-project.org/web/packages/oce/vignettes/D_map_projections.html\nR Spatial Workshop Notes: https://spatialanalysis.github.io/workshop-notes/spatial-clustering.html\nNHS-R NHS Colour Guidelines: https://nhsengland.github.io/nhs-r-reporting/tutorials/nhs-colours.html\n\nShapefiles\n\nThe Open Geography portal from the Office for National Statistics (ONS): https://geoportal.statistics.gov.uk/\nThe London Datastore:Shapefiles and plenty of social indicators to plot (OA,LSOA,MSOA,Wards) https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london"
  },
  {
    "objectID": "Resources.html#online-r-and-python-books",
    "href": "Resources.html#online-r-and-python-books",
    "title": "Resources",
    "section": "Online R and Python books",
    "text": "Online R and Python books\n\nAn introduction to R - Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto & David Lusseau: https://intro2r.com/\nWelcome to R for Data Science - Hadley Wickham, Garrett Grolemund: https://r4ds.had.co.nz/\nThink Python -How to Think Like a Computer Scientist - Alllen B. Downey: https://greenteapress.com/thinkpython2/html/index.html\nGgplot2 Elegant Graphics for Data Analysis - Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen: https://ggplot2-book.org/index.html\nGgplot2 Elegant Graphics for Data Analysis - Specific chapter about plotting maps in R: https://ggplot2-book.org/maps.html\nGeocomputation with R: https://bookdown.org/robinlovelace/geocompr/spatial-class.html\nChapter 16. Geospatial- The Big book of r: https://www.bigbookofr.com/geospatial.html"
  }
]