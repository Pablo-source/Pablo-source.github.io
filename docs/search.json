[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pablo-source.github.io",
    "section": "",
    "text": "This is my personal website where I will publish Quarto documents about Data Analysis, statistics, predictive modelling and visualization using R and Python\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "City_maps.html",
    "href": "City_maps.html",
    "title": "City maps using OpenStreetMap R package",
    "section": "",
    "text": "This is a project to build maps with global open access mapping data using OSMDATA package in R.\nhttps://docs.ropensci.org/osmdata/articles/osmdata.html.\nIn the package website, they explain that working with open access map data, ensures transparent data provenance and ownership, allowing anyone to contribute, encouraging democratic decision making and citizen science. OSM is a global open access mapping project, which is free and open under the ODbL licence (OpenStreetMap contributors 2017)"
  },
  {
    "objectID": "City_maps.html#working-with-vector-data",
    "href": "City_maps.html#working-with-vector-data",
    "title": "City maps using OpenStreetMap R package",
    "section": "Working with vector data",
    "text": "Working with vector data\nOpenStreetMap (OSM) project information can be accessed via overpassqueries using osmdata package in R. This package obtain OSM data from the overpass API, which is a read-only API that serves up custom selected parts of the the OSM map data."
  },
  {
    "objectID": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "href": "City_maps.html#install-and-load-osmdata-package-from-cran",
    "title": "City maps using OpenStreetMap R package",
    "section": "Install and load OSMDATA package from CRAN",
    "text": "Install and load OSMDATA package from CRAN\nTo start working with Open OpenStreetMap package, install it from CRAN\n\n\nCode\n# install.packages(\"osmdata\",dependencies = TRUE)\n\n\nAnd then load it the usual way\n\n\n\nFrom osmdata package we will use these functions to plot our map:\n\ngetbb(): Get bounding box for a given place name\navailable_features(): List recognized features in OpenStreetMap(OSM)\navailable_features(): List recognized features in OSM. This function returns a character vector of all known features\navailable_tags(): List tags associated with a feature\n\nOnce we know which features and tags we want to include in our map, we can start building the query to the API to retrieve these features\n\nopq(): Build an Overpass query\nadd_osm_feature(): Add a feature to an Overpass query. We specify the feature we want to plot and within that feature, we can also include a set of tags to be plotted in the map. As in the example below, we might want to plot “highway” feature in the map, so we include it in the Overpass query, but also we can specify other tags within that feature such as ““motorway”,“primary”,“secondary”,“tertiary”,“residential”,“living_street”,“unclassified” as we can see in the Valencia city map example.\nosmdata_sf(): Return an OSM Overpass query as an osmdata object in sf format.\n\nThe combination of the above three functions provides us with an object that ggplot() package can take in to create a map using the geom_sf() function.\nIn a nutshell, a sf object is a collection of simple features that includes attributes and geometries in the form of a data frame. It is a data frame (or tibble) with rows of features, columns of attributes, and a special geometry column that contains the spatial aspects of the features.\nFor a further explantion about sf objects, please refer to Jesse Sadler website: [sf objects]https://www.jessesadler.com/post/simple-feature-objects/#:~:text=At%20its%20most%20basic%2C%20an,spatial%20aspects%20of%20the%20features.\nLoad also extra libraries for data wrangling and to create plots\n\n\nCode\npacman::p_load(here,tidyverse,osmdata,sf,showtext)\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "href": "City_maps.html#visualize-valencia-city-map-using-openstreetmap-tutorial",
    "title": "City maps using OpenStreetMap R package",
    "section": "Visualize Valencia city map using OpenStreetMap tutorial",
    "text": "Visualize Valencia city map using OpenStreetMap tutorial\nWhen building maps using OpenStreetMap, we can think about them in similar terms as ggplot2 plots, in the sense we build them step by step, adding one layer at a time to display the required information on top of the initial map of the region we want to create a map from.\nHaving selected the city we want to plot, then we use getbb() function to obtain a bounding box for a given place name. In this instance I will plot the city of Valencia in Spain.\ngetbb() provides latitude and longitude coordinates associated with Valencia city in Spain\n\n\nCode\ngetbb(\"Valencia Spain\")\n\n\n         min        max\nx -0.4325512 -0.2725205\ny 39.2784496 39.5666089"
  },
  {
    "objectID": "City_maps.html#select-your-reagion-and-add-one-feature",
    "href": "City_maps.html#select-your-reagion-and-add-one-feature",
    "title": "City maps using OpenStreetMap R package",
    "section": "1. Select your reagion and add one feature",
    "text": "1. Select your reagion and add one feature\nNow that I want to plot a map of Valencia I need to choose which features do I want to plot. Each feature is defined by a key and each key is sub-divided into further values.\nFor example, if I want to start plotting roads or highways into my map, I need to first identify how roads are defined in osmdata package. For that we use available_features() function to choose different roads or transportation routes defined in the map\n\n\nCode\n# Not run as there are more than 250 elements\n# available_features()\n\n\nFrom the above list of features I can see “highway” as available key, so now I need to know which specific values are linked to that key. For tha I will use available_tags() function, to find out which values are related to the key “highway”\n\n\nCode\navailable_tags(\"highway\")\n\n\n [1] \"bridleway\"              \"bus_guideway\"           \"bus_stop\"              \n [4] \"busway\"                 \"construction\"           \"corridor\"              \n [7] \"crossing\"               \"cycleway\"               \"elevator\"              \n[10] \"emergency_access_point\" \"emergency_bay\"          \"escape\"                \n[13] \"footway\"                \"give_way\"               \"living_street\"         \n[16] \"milestone\"              \"mini_roundabout\"        \"motorway\"              \n[19] \"motorway_junction\"      \"motorway_link\"          \"passing_place\"         \n[22] \"path\"                   \"pedestrian\"             \"platform\"              \n[25] \"primary\"                \"primary_link\"           \"proposed\"              \n[28] \"raceway\"                \"residential\"            \"rest_area\"             \n[31] \"road\"                   \"secondary\"              \"secondary_link\"        \n[34] \"service\"                \"services\"               \"speed_camera\"          \n[37] \"steps\"                  \"stop\"                   \"street_lamp\"           \n[40] \"tertiary\"               \"tertiary_link\"          \"toll_gantry\"           \n[43] \"track\"                  \"traffic_mirror\"         \"traffic_signals\"       \n[46] \"trailhead\"              \"trunk\"                  \"trunk_link\"            \n[49] \"turning_circle\"         \"turning_loop\"           \"unclassified\"          \n[52] \"via_ferrata\"           \n\n\nAs I want to start by plotting the main roads in the city of Valencia, i will choose a handful of the above tags: motorway, primary, secondary, tertiary,residential,living_street, unclassified."
  },
  {
    "objectID": "City_maps.html#choosing-elements-for-map-first-layer",
    "href": "City_maps.html#choosing-elements-for-map-first-layer",
    "title": "City maps using OpenStreetMap R package",
    "section": "2. Choosing elements for map first layer",
    "text": "2. Choosing elements for map first layer\nWe name each layer with the key and values we want to plot in the map. So for this first example, I want to see several types of roads in the region of Valencia\n\n\nCode\n# MAP LAYER 01: roads  \nroads <- getbb(\"Valencia Spain\") %>% \n         opq(timeout =  3500) %>% \n         add_osm_feature(key = \"highway\",\n                        value = c(\"motorway\",\"primary\",\"secondary\",\"tertiary\",\n                                  \"residential\",\"living_street\",\"unclassified\")) %>% \n         osmdata_sf()\nroads"
  },
  {
    "objectID": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "href": "City_maps.html#building-maps-in-layers-by-adding-natural-and-urban-features",
    "title": "City maps using OpenStreetMap R package",
    "section": "3. Building maps in layers by adding natural and urban features",
    "text": "3. Building maps in layers by adding natural and urban features\n\n3.1 Initial Valencia city map showing roads and highways\nUsing ggplot2, we use the sf cartographic object we queried from the OpenMap API, mapping several sf objects via ggplot2 and geom_sf() functions.\nAlso, It is in this step where we make use of getbb(“Valencia Spain”) function, to ensure the features we match the specific latitude and longitude of the city we want to plot.\nWe have created so far just one geom_sf() object, we include it within the ggplot() function alongside the lat and long coordinated of Valencia.\nPrior to producing the final map, we define the color palette for each new feature\n\n\nCode\n# Remember to enclose Hexadecimal colors in apostrophes \nroad_color <- '#000000'\ncoastline_color <- '#000000'\n\n\nThen we can combine all previous scripts to create our first map\n\n\nCode\nValencia_roads_map <- ggplot() +\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_roads_map\n\n\n\n\n\n\n\n3.2 Valencia city map including roads and coastline\nWe now include a new feature to our map, this time we want to map the coastline and natural water features int he Valencia region.\nWe start by choosing the relevant key feature labelled as “natural” and browse different water related tags to be included in our map.\n\n\nCode\navailable_tags(\"natural\")\n\n\n [1] \"arch\"          \"arete\"         \"bare_rock\"     \"bay\"          \n [5] \"beach\"         \"blowhole\"      \"cape\"          \"cave_entrance\"\n [9] \"cliff\"         \"coastline\"     \"crevasse\"      \"dune\"         \n[13] \"earth_bank\"    \"fell\"          \"fumarole\"      \"geyser\"       \n[17] \"glacier\"       \"grassland\"     \"heath\"         \"hill\"         \n[21] \"hot_spring\"    \"isthmus\"       \"moor\"          \"mud\"          \n[25] \"peak\"          \"peninsula\"     \"reef\"          \"ridge\"        \n[29] \"rock\"          \"saddle\"        \"sand\"          \"scree\"        \n[33] \"scrub\"         \"shingle\"       \"shoal\"         \"shrubbery\"    \n[37] \"sinkhole\"      \"spring\"        \"stone\"         \"strait\"       \n[41] \"tree\"          \"tree_row\"      \"tundra\"        \"valley\"       \n[45] \"volcano\"       \"water\"         \"wetland\"       \"wood\"         \n\n\nAt a first glance, we can use those tabs related to coastal geological features such as “bay”,“water”,“beach”,“wetland” and “dune”. Let’s create a new object to include all these tags.\n\n\nCode\nVlc_coastline <- getbb(\"Valencia Spain\") %>% \n                         opq(timeout =  3500) %>% \n                         add_osm_feature(key = \"natural\",\n                                        value = c(\"bay\",\"water\",\"beach\",\"wetland\",\"dune\",\"coastline\")) %>% \n                         osmdata_sf()\nVlc_coastline\n\n\nIn order to display the sea bay in front of Valencia we define it as multipolygons object\n\n\nCode\nVlc_coastline_multipolygons <- Vlc_coastline$osm_multipolygons\n\n\nWe can create now a new map that will combine both coastline and road features\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\n\n\nThis is a new map that will combine roads and coastline layers\n\n\nCode\nValencia_coastline_map <- ggplot() +\n                  # roads\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                  # coastline as multipolygons\n                  geom_sf(data = Vlc_coastline_multipolygons,\n                          inherit.aes = FALSE,\n                          color = coastline_color\n                            ) +\n                 # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_coastline_map\n\n\n\n\n\n\n\n3.3 New Water bodies features added to Valencia city map\nWe want to include the see and different water bodies such as reservoirs and natural lagoons in the map, in the South part of the City of Valencia ther is a big lagoon called “La Albufera” we want to display it in hues of blue colors.\n\n\nCode\nVlc_water <- getbb(\"Valencia Spain\") %>% \n                         opq(timeout =  3500) %>% \n                         add_osm_feature(key = \"water\") %>% \n                         osmdata_sf()\n\nVlc_sea <- getbb(\"Valencia Spain\") %>% \n                         opq(timeout =  3500) %>% \n                         add_osm_feature(key = \"waterway\",\n                                         value = \"river\") %>% \n                         osmdata_sf()\n\n\nDefine these two new water features as polygons\n\n\nCode\nVlc_water_multipolygons <- Vlc_water$osm_multipolygons\nVlc_sea_multipolygons <- Vlc_sea$osm_multipolygons\n\n\nThen we can add these two new layers of water features to the existing map Define first two new colours for water features\n\n\nCode\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\nNow we can produce a new map with the new water layers added to it.\nFirst we group all colour palettes uses on each feature on this new map\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\n\n\n\n\nCode\nValencia_waterways_map <- ggplot() +\n                  # roads\n                  geom_sf(data = roads$osm_lines,\n                          inherit.aes = FALSE,\n                          color = road_color\n                            ) +\n                    # coastline as multipolygons\n                  geom_sf(data = Vlc_coastline_multipolygons,\n                          inherit.aes = FALSE,\n                          color = coastline_color\n                            ) +\n  \n                  # water colour as multipolygons\n                  geom_sf(data = Vlc_water_multipolygons,\n                          inherit.aes = FALSE,\n                          color = water_color\n                            ) +\n                  # waterway colour as multipolygons\n      geom_sf(data = Vlc_sea_multipolygons,\n                          inherit.aes = FALSE,\n                          color = waterway_color\n                            ) +\n# Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),\n                           ylim = c(39.2784496, 39.5666089),\n                           expand = FALSE)\nValencia_waterways_map                    \n\n\n\n\n\n\n\n3.4 Including specific feature by name in the map\nThis new map layer provides us with an efficient way of locating specific geological features by its common name. In this example I will include the l’Albufera freshwater lagoon. It is the largest freshwater lagoon in Spain, spanning more than 2,800 hectares.\n\n\nCode\nAlbufera_lagoon  <- getbb(\"Valencia Spain\") %>% \n                      opq(timeout =  3500) %>% \n                      add_osm_feature(key = \"natural\") %>% \n                      add_osm_feature(key = \"name\", value = \"l'Albufera\", value_exact = FALSE) %>% \n                      osmdata_sf()\n\n\nAgain we define this lagoon as a polygon object in the map\n\n\nCode\n# We choose multipolygons from shapefile to be plotted in the map \nAlbufera_multipolygons <- Albufera_lagoon$osm_multipolygons\n\n\nSpecific geological feature included by name in the map\n\n\nCode\nroad_color <- '#1E212B'\ncoastline_color <- '#D4B483'\nwater_color <- '#0066CC'\nwaterway_color <- '#99CCFF'\nalbufera_lagoon <- \"#0ACDFF\"\n\n\n\n\nCode\nValencia_lagoon_map <- ggplot() +\n                  # roads\n                  geom_sf(data = roads$osm_lines,inherit.aes = FALSE,color = road_color) +\n                  # coastline\n                  geom_sf(data = Vlc_coastline_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n                  # water colour as multipolygons\n                  geom_sf(data = Vlc_water_multipolygons,inherit.aes = FALSE, fill = water_color, color = water_color) +\n                  # waterway colour as multipolygons\n                  geom_sf(data = Vlc_sea_multipolygons,inherit.aes = FALSE, fill = waterway_color, color = waterway_color) +\n                  # Adding l'Albufera lagoon to the map\n                  geom_sf(data = Albufera_multipolygons,inherit.aes = FALSE, fill = albufera_lagoon, color = albufera_lagoon) +\n  # Define city coordinates for maps. Given by getbb(\"Valencia Spain\") function\n                  coord_sf(xlim = c(-0.4325512, -0.2725205),ylim = c(39.2784496, 39.5666089),expand = FALSE)\n\nValencia_lagoon_map"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is my personal website where I will publish Quarto documents about Data Analysis, statistics, modelling and visualization using R and Python\n\n1 + 1\n\n[1] 2"
  }
]